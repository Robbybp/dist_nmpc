from __future__ import division
from pyomo.environ import * 
from pyomo.dae import *
from pyomo.core.kernel.expr import exp,sqrt

__author__ = 'Robert Parker' # July 2018

# Two column, three component distillation sequence. Dynamic model. Constant relative vol (alpha) assumption, no energy balance. 

m = ConcreteModel(name='dist model') 

# define these to make things easier to type
A = 'A'
B = 'B'
C = 'C'

NT = 41 
NF = 21

# Maybe relocate these (so they can reference parameters (like NT) ) 
m.comp = Set(initialize=[1,2,3])
# should trays be from 0 to 40 or 1 to 41? will roll with 1 to 41 for now...
m.tray = Set(initialize=range(1,NT+1))
m.tray.pprint()
m.set_1_2 = Set(initialize=[1,2])
m.set_1_3 = Set(initialize=[1,2,3]) 


# -----
# Run options
# -----
m.sig          = Param(initialize=0.9)
m.K            = Param(initialize=100) # number of dynopt solves 
m.econ_switch  = Param(initialize=0)
m.track_switch = Param(initialize=1) 
m.pen_switch   = Param(initialize=1)   # penalties/soft constraints associated with ... ? 
m.noise_switch = Param(initialize=1)   # important for tracking case? (else solve same problem repeatedly) 
                                       # could add other disturbance model... 
m.regu_frac    = Param(initialize=0)
m.rho          = Param(initialize=10**4) # l1 penalty weight 
m.smt          = Param(initialize=0.01)  # I can only assume smoothmax parameter 
m.F_dev        = Param(initialize=0.1)   # variances for normal-dist noise? 
m.zF_dev       = Param(initialize=0.01)

# ----
# K sets
# ----
m.K_set    = Set(initialize=range(-1,m.K+1))
# will defining K_set over a larger range then not initializing or not using some values of the indexed variables/params be an issue?
m.set_0_Km1  = Set(initialize=range(0,m.K.value))   # 0 through K-1, 
m.set_m1_Km1 = Set(initialize=range(-1,m.K.value))  # -1 through K-1 
m.set_0_K    = Set(initialize=range(0,m.K.value+1)) # 0 through K    

# ----
# Tray sets 
# ----
m.set_1_NTm1    = Set(initialize=range(1,NT))   
m.set_1_NT      = Set(initialize=range(1,NT+1))
m.set_2_NT      = Set(initialize=range(2,NT+1))
m.set_1_NFm1    = Set(initialize=range(1,NF))
m.set_NF_NTm1   = Set(initialize=range(NF,NT))
m.set_2_NF      = Set(initialize=range(2,NF+1))
m.set_NFp1_NTm1 = Set(initialize=range(NF+1,NT))
m.set_2_NFm1    = Set(initialize=range(2,NF))


# ----
# Params as vars 
# ----
#m.ncp = Param(initialize=3)  # does this include finite element points (0th colloc points)?
#m.nfe = Param(initialize=50) # refer to points, or elements themselves?
#m.cp_set = Set(initialize=range(1,m.ncp+1))
#m.fe_set = Set(initialize=range(0,m.nfe))
m.weights = Set(initialize=range(1,980))

# important: do these decide the st.st. conditions?
# set from init data, or make up? 
m.nominal_F = Param(initialize=1.41)
m.nominal_qF = Param(initialize=1.0)
m.nominal_pV = Param(initialize=8.0e-03) 
nominal_zF_dict = {1:0.4,2:0.2,3:0.4} 
m.nominal_zF = Param(m.comp,initialize=nominal_zF_dict)#,mutable=True)
m.weight = Param(m.weights,mutable=True)

# ----
# continuous-set setup
# ----
m.nfe = 25
m.ncp = 3
#m.t   = ContinuousSet(bounds=(0,100))
m.fe  = Set(initialize=range(0,m.nfe))
m.fep = Set(initialize=range(0,m.nfe+1))
m.set_1_nfe = Set(initialize=range(1,m.nfe+1))
m.cp  = Set(initialize=range(1,m.ncp+1))
# perform collocation later (after constraints added)

# ----
# Parameters (somehow different from parameters declared so far)
# ---- 
m.NT          = Param(initialize=41)                # number of trays
m.NC          = Param(initialize=3)                 # number components
m.NF          = Param(initialize=21)                # feed entry tray
m.time        = Param(initialize=25)                # hours of operation? 
m.h           = Param(m.fe,initialize=m.time/m.nfe) # (variable?) FE time step
m.omega       = Param(m.cp,m.cp, 
initialize={(1,1):  0.19681547722366, (1,2):  0.39442431473909, (1,3): 0.37640306270047,
            (2,1): -0.06553542585020, (2,2):  0.29207341166523, (2,3): 0.51248582618842,
            (3,1):  0.02377097434822, (3,2): -0.04154875212600, (3,3): 0.11111111111111 }) # colloc deriv ? 
 
m.numstat     = Param(initialize=6*m.NT) # why are xj, M the states we care about here?  
m.state_set   = Set(initialize=range(1,m.numstat+1))
m.state_act   = Param(m.state_set,m.set_0_K,mutable=True)   
#m.state_set.pprint()

# what is sol_stat? 
# "solved-for state" "measured state"
m.sol_stat    = Param(m.set_0_Km1,mutable=True) 
# actual or predicted: 
m.step_cost   = Param(m.set_0_Km1,mutable=True)        
# ^figure this out from .run file 

# calculated a posteriori ?
m.avg_cost    = Param(mutable=True)          
m.vkmin1      = Param(mutable=True)        
m.lkmin1      = Param(mutable=True)       
m.vtr         = Param(m.set_m1_Km1,mutable=True)
m.termepsk    = Param(m.set_0_Km1)        
m.descepsk    = Param(m.set_0_Km1)      
m.ltr         = Param(m.set_m1_Km1,mutable=True) 
m.normx       = Param(m.set_0_K,mutable=True)         
m.sigcosttest = Param(m.set_1_2,range(1,8))
# ^ purpose of this block of (mutable) parameters is still unclear...

# refErence "parameters" 
# must these be mutable? (think not)
m.Fref        = Param(initialize=1.41)     

m.qFref       = Param(initialize=1.0)       
m.y1ref       = Param(m.set_1_NTm1,m.set_1_2,
        initialize={  (1,1): 2.183127e-02 ,  (1,2): 4.114382e-01,
                      (2,1): 3.360446e-02 ,  (2,2): 4.896975e-01,            
                      (3,1): 4.832584e-02 ,  (3,2): 5.520340e-01,
                      (4,1): 6.612979e-02 ,  (4,2): 5.966153e-01,
                      (5,1): 8.713110e-02 ,  (5,2): 6.239855e-01,
                      (6,1): 1.114339e-01 ,  (6,2): 6.360879e-01,
                      (7,1): 1.391053e-01 ,  (7,2): 6.353817e-01,
                      (8,1): 1.701249e-01 ,  (8,2): 6.242979e-01,  
                      (9,1): 2.043285e-01 ,  (9,2): 6.050155e-01,
                     (10,1): 2.413620e-01 , (10,2): 5.794354e-01,
                     (11,1): 2.806589e-01 , (11,2): 5.492391e-01,
                     (12,1): 3.214534e-01 , (12,2): 5.159538e-01,
                     (13,1): 3.628295e-01 , (13,2): 4.809872e-01,
                     (14,1): 4.038015e-01 , (14,2): 4.456238e-01,
                     (15,1): 4.434095e-01 , (15,2): 4.109931e-01,
                     (16,1): 4.808105e-01 , (16,2): 3.780280e-01,
                     (17,1): 5.153473e-01 , (17,2): 3.474327e-01,
                     (18,1): 5.465841e-01 , (18,2): 3.196710e-01,
                     (19,1): 5.743080e-01 , (19,2): 2.949799e-01,
                     (20,1): 5.985038e-01 , (20,2): 2.734016e-01,
                     (21,1): 6.193116e-01 , (21,2): 2.548282e-01,
                     (22,1): 6.667351e-01 , (22,2): 2.502579e-01,
                     (23,1): 7.082056e-01 , (23,2): 2.386326e-01,
                     (24,1): 7.443271e-01 , (24,2): 2.223857e-01,
                     (25,1): 7.759590e-01 , (25,2): 2.035575e-01,
                     (26,1): 8.038985e-01 , (26,2): 1.836670e-01,
                     (27,1): 8.287676e-01 , (27,2): 1.637658e-01,
                     (28,1): 8.510117e-01 , (28,2): 1.445447e-01,
                     (29,1): 8.709413e-01 , (29,2): 1.264341e-01,
                     (30,1): 8.887781e-01 , (30,2): 1.096817e-01,
                     (31,1): 9.046934e-01 , (31,2): 9.440793e-02,
                     (32,1): 9.188335e-01 , (32,2): 8.064479e-02,
                     (33,1): 9.313348e-01 , (33,2): 6.836372e-02,
                     (34,1): 9.423309e-01 , (34,2): 5.749572e-02,
                     (35,1): 9.519544e-01 , (35,2): 4.794629e-02,
                     (36,1): 9.603369e-01 , (36,2): 3.960656e-02,
                     (37,1): 9.676065e-01 , (37,2): 3.236151e-02,
                     (38,1): 9.738862e-01 , (38,2): 2.609588e-02,
                     (39,1): 9.792918e-01 , (39,2): 2.069835e-02,
                     (40,1): 9.839306e-01 , (40,2): 1.606416e-02 })

m.y2ref       = Param(m.set_1_NTm1,m.set_1_2,
        initialize={  (1,1): 8.293634e-07 ,  (1,2): 8.476575e-03,
                      (2,1): 1.509567e-06 ,  (2,2): 1.193782e-02,            
                      (3,1): 2.626314e-06 ,  (3,2): 1.619097e-02,
                      (4,1): 4.455499e-06 ,  (4,2): 2.140067e-02,
                      (5,1): 7.443216e-06 ,  (5,2): 2.775727e-02,
                      (6,1): 1.230670e-05 ,  (6,2): 3.547656e-02,
                      (7,1): 2.019133e-05 ,  (7,2): 4.479683e-02,
                      (8,1): 3.291148e-05 ,  (8,2): 5.597214e-02,  
                      (9,1): 5.331382e-05 ,  (9,2): 6.926040e-02,
                     (10,1): 8.581470e-05 , (10,2): 8.490510e-02,
                     (11,1): 1.371776e-04 , (11,2): 1.031100e-01,
                     (12,1): 2.176091e-04 , (12,2): 1.240074e-01,
                     (13,1): 3.422626e-04 , (13,2): 1.476222e-01,
                     (14,1): 5.332418e-04 , (14,2): 1.738371e-01,
                     (15,1): 8.221944e-04 , (15,2): 2.023654e-01,
                     (16,1): 1.253589e-03 , (16,2): 2.327395e-01,
                     (17,1): 1.888776e-03 , (17,2): 2.643223e-01,
                     (18,1): 2.810958e-03 , (18,2): 2.963421e-01,
                     (19,1): 4.131276e-03 , (19,2): 3.279486e-01,
                     (20,1): 5.996242e-03 , (20,2): 3.582784e-01,
                     (21,1): 8.596803e-03 , (21,2): 3.865171e-01,
                     (22,1): 8.758815e-03 , (22,2): 4.121227e-01,
                     (23,1): 8.958249e-03 , (23,2): 4.434548e-01,
                     (24,1): 9.197930e-03 , (24,2): 4.807614e-01,
                     (25,1): 9.478262e-03 , (25,2): 5.237647e-01,
                     (26,1): 9.796834e-03 , (26,2): 5.715190e-01,
                     (27,1): 1.014902e-02 , (27,2): 6.223995e-01,
                     (28,1): 1.052997e-02 , (28,2): 6.742716e-01,
                     (29,1): 1.093797e-02 , (29,2): 7.248229e-01,
                     (30,1): 1.137878e-02 , (30,2): 7.719545e-01,
                     (31,1): 1.187033e-02 , (31,2): 8.140963e-01,
                     (32,1): 1.244768e-02 , (32,2): 8.503500e-01,
                     (33,1): 1.316896e-02 , (33,2): 8.804532e-01,
                     (34,1): 1.412333e-02 , (34,2): 9.046185e-01,
                     (35,1): 1.544291e-02 , (35,2): 9.233298e-01,
                     (36,1): 1.732078e-02 , (36,2): 9.371504e-01,
                     (37,1): 2.003756e-02 , (37,2): 9.465708e-01,
                     (38,1): 2.399965e-02 , (38,2): 9.518941e-01,
                     (39,1): 2.979266e-02 , (39,2): 9.531473e-01,
                     (40,1): 3.825284e-02 , (40,2): 9.500000e-01 })

m.x1ref       = Param(m.set_1_NT,m.set_1_2,
        initialize={  (1,1): 1.281271e-02 ,  (1,2): 3.219625e-01,
                      (2,1): 2.049139e-02 ,  (2,2): 3.981449e-01,            
                      (3,1): 3.051545e-02 ,  (3,2): 4.647773e-01,
                      (4,1): 4.304970e-02 ,  (4,2): 5.178525e-01,
                      (5,1): 5.820853e-02 ,  (5,2): 5.558104e-01,
                      (6,1): 7.608970e-02 ,  (6,2): 5.791143e-01,
                      (7,1): 9.678189e-02 ,  (7,2): 5.894187e-01,
                      (8,1): 1.203421e-01 ,  (8,2): 5.888173e-01,  
                      (9,1): 1.467532e-01 ,  (9,2): 5.793803e-01,
                     (10,1): 1.758752e-01 , (10,2): 5.629626e-01,
                     (11,1): 2.074067e-01 , (11,2): 5.411829e-01,
                     (12,1): 2.408653e-01 , (12,2): 5.154729e-01,
                     (13,1): 2.755990e-01 , (13,2): 4.871328e-01,
                     (14,1): 3.108279e-01 , (14,2): 4.573611e-01,
                     (15,1): 3.457127e-01 , (15,2): 4.272516e-01,
                     (16,1): 3.794362e-01 , (16,2): 3.977659e-01,
                     (17,1): 4.112806e-01 , (17,2): 3.696984e-01,
                     (18,1): 4.406863e-01 , (18,2): 3.436486e-01,
                     (19,1): 4.672823e-01 , (19,2): 3.200115e-01,
                     (20,1): 4.908873e-01 , (20,2): 2.989886e-01,
                     (21,1): 5.114883e-01 , (21,2): 2.806162e-01,
                     (22,1): 5.716050e-01 , (22,2): 2.860680e-01,
                     (23,1): 6.252333e-01 , (23,2): 2.808998e-01,
                     (24,1): 6.721298e-01 , (24,2): 2.677534e-01,
                     (25,1): 7.129775e-01 , (25,2): 2.493808e-01,
                     (26,1): 7.487481e-01 , (26,2): 2.280891e-01,
                     (27,1): 7.803432e-01 , (27,2): 2.055961e-01,
                     (28,1): 8.084661e-01 , (28,2): 1.830911e-01,
                     (29,1): 8.336207e-01 , (29,2): 1.613550e-01,
                     (30,1): 8.561578e-01 , (30,2): 1.408748e-01,
                     (31,1): 8.763284e-01 , (31,2): 1.219306e-01,
                     (32,1): 8.943260e-01 , (32,2): 1.046584e-01,
                     (33,1): 9.103162e-01 , (33,2): 8.909449e-02,
                     (34,1): 9.244532e-01 , (34,2): 7.520657e-02,
                     (35,1): 9.368880e-01 , (35,2): 6.291661e-02,
                     (36,1): 9.477707e-01 , (36,2): 5.211774e-02,
                     (37,1): 9.572499e-01 , (37,2): 4.268684e-02,
                     (38,1): 9.654707e-01 , (38,2): 3.449385e-02,
                     (39,1): 9.725720e-01 , (39,2): 2.740843e-02,
                     (40,1): 9.786849e-01 , (40,2): 2.130469e-02,
                     (41,1): 9.839306e-01 , (41,2): 1.606416e-02 })
m.x2ref       = Param(m.set_1_NT,m.set_1_2,
        initialize={  (1,1): 4.158569e-07 ,  (1,2): 5.667065e-03,
                      (2,1): 7.577998e-07 ,  (2,2): 7.990347e-03,            
                      (3,1): 1.320284e-06 ,  (3,2): 1.085257e-02,
                      (4,1): 2.243761e-06 ,  (4,2): 1.436965e-02,
                      (5,1): 3.756377e-06 ,  (5,2): 1.867773e-02,
                      (6,1): 6.227024e-06 ,  (6,2): 2.393422e-02,
                      (7,1): 1.024881e-05 ,  (7,2): 3.031757e-02,
                      (8,1): 1.676888e-05 ,  (8,2): 3.802483e-02,  
                      (9,1): 2.728762e-05 ,  (9,2): 4.726608e-02,
                     (10,1): 4.415902e-05 , (10,2): 5.825460e-02,
                     (11,1): 7.103513e-05 , (11,2): 7.119175e-02,
                     (12,1): 1.135089e-04 , (12,2): 8.624602e-02,
                     (13,1): 1.800205e-04 , (13,2): 1.035268e-01,
                     (14,1): 2.831008e-04 , (14,2): 1.230547e-01,
                     (15,1): 4.410281e-04 , (15,2): 1.447327e-01,
                     (16,1): 6.799731e-04 , (16,2): 1.683237e-01,
                     (17,1): 1.036709e-03 , (17,2): 1.934412e-01,
                     (18,1): 1.561966e-03 , (18,2): 2.195581e-01,
                     (19,1): 2.324551e-03 , (19,2): 2.460364e-01,
                     (20,1): 3.416367e-03 , (20,2): 2.721729e-01,
                     (21,1): 4.958573e-03 , (21,2): 2.972537e-01,
                     (22,1): 5.102739e-03 , (22,2): 3.201278e-01,
                     (23,1): 5.283840e-03 , (23,2): 3.487502e-01,
                     (24,1): 5.506771e-03 , (24,2): 3.837738e-01,
                     (25,1): 5.774691e-03 , (25,2): 4.254759e-01,
                     (26,1): 6.088051e-03 , (26,2): 4.735458e-01,
                     (27,1): 6.444158e-03 , (27,2): 5.269265e-01,
                     (28,1): 6.837838e-03 , (28,2): 5.838018e-01,
                     (29,1): 7.263668e-03 , (29,2): 6.417854e-01,
                     (30,1): 7.719742e-03 , (30,2): 6.982926e-01,
                     (31,1): 8.212492e-03 , (31,2): 7.509773e-01,
                     (32,1): 8.761948e-03 , (32,2): 7.980841e-01,
                     (33,1): 9.407327e-03 , (33,2): 8.386093e-01,
                     (34,1): 1.021359e-02 , (34,2): 8.722592e-01,
                     (35,1): 1.128040e-02 , (35,2): 8.992716e-01,
                     (36,1): 1.275545e-02 , (36,2): 9.201875e-01,
                     (37,1): 1.485457e-02 , (37,2): 9.356365e-01,
                     (38,1): 1.789144e-02 , (38,2): 9.461667e-01,
                     (39,1): 2.232034e-02 , (39,2): 9.521173e-01,
                     (40,1): 2.879588e-02 , (40,2): 9.535181e-01,
                     (41,1): 3.825284e-02 , (41,2): 9.500000e-01 })

m.M1ref       = Param(m.set_1_NT,
        initialize={  (1): 5.347829e-01 ,
                      (2): 5.833503e-01 ,            
                      (3): 5.833503e-01 ,
                      (4): 5.833503e-01 ,
                      (5): 5.833503e-01 ,
                      (6): 5.833503e-01 ,
                      (7): 5.833503e-01 ,
                      (8): 5.833503e-01 ,  
                      (9): 5.833503e-01 ,
                     (10): 5.833503e-01 ,
                     (11): 5.833503e-01 ,
                     (12): 5.833503e-01 ,
                     (13): 5.833503e-01 ,
                     (14): 5.833503e-01 ,
                     (15): 5.833503e-01 ,
                     (16): 5.833503e-01 ,
                     (17): 5.833503e-01 ,
                     (18): 5.833503e-01 ,
                     (19): 5.833503e-01 ,
                     (20): 5.833503e-01 ,
                     (21): 5.833503e-01 ,
                     (22): 5.902331e-01 ,
                     (23): 5.902331e-01 ,
                     (24): 5.902331e-01 ,
                     (25): 5.902331e-01 ,
                     (26): 5.902331e-01 ,
                     (27): 5.902331e-01 ,
                     (28): 5.902331e-01 ,
                     (29): 5.902331e-01 ,
                     (30): 5.902331e-01 ,
                     (31): 5.902331e-01 ,
                     (32): 5.902331e-01 ,
                     (33): 5.902331e-01 ,
                     (34): 5.902331e-01 ,
                     (35): 5.902331e-01 ,
                     (36): 5.902331e-01 ,
                     (37): 5.902331e-01 ,
                     (38): 5.902331e-01 ,
                     (39): 5.902331e-01 ,
                     (40): 5.902331e-01 ,
                     (41): 5.062171e-01  })
m.M2ref       = Param(m.set_1_NT,
        initialize={  (1): 5.063857e-01 ,
                      (2): 4.794139e-01 ,            
                      (3): 4.794139e-01 ,
                      (4): 4.794139e-01 ,
                      (5): 4.794139e-01 ,
                      (6): 4.794139e-01 ,
                      (7): 4.794139e-01 ,
                      (8): 4.794139e-01 ,  
                      (9): 4.794139e-01 ,
                     (10): 4.794139e-01 ,
                     (11): 4.794139e-01 ,
                     (12): 4.794139e-01 ,
                     (13): 4.794139e-01 ,
                     (14): 4.794139e-01 ,
                     (15): 4.794139e-01 ,
                     (16): 4.794139e-01 ,
                     (17): 4.794139e-01 ,
                     (18): 4.794139e-01 ,
                     (19): 4.794139e-01 ,
                     (20): 4.794139e-01 ,
                     (21): 4.794139e-01 ,
                     (22): 4.814175e-01 ,
                     (23): 4.814175e-01 ,
                     (24): 4.814175e-01 ,
                     (25): 4.814175e-01 ,
                     (26): 4.814175e-01 ,
                     (27): 4.814175e-01 ,
                     (28): 4.814175e-01 ,
                     (29): 4.814175e-01 ,
                     (30): 4.814175e-01 ,
                     (31): 4.814175e-01 ,
                     (32): 4.814175e-01 ,
                     (33): 4.814175e-01 ,
                     (34): 4.814175e-01 ,
                     (35): 4.814175e-01 ,
                     (36): 4.814175e-01 ,
                     (37): 4.814175e-01 ,
                     (38): 4.814175e-01 ,
                     (39): 4.814175e-01 ,
                     (40): 4.814175e-01 ,
                     (41): 4.783972e-01  })

m.V1ref       = Param(m.set_1_NTm1,
        initialize={  (1): 4.858812e+00 ,
                      (2): 4.858812e+00 ,            
                      (3): 4.858812e+00 ,
                      (4): 4.858812e+00 ,
                      (5): 4.858812e+00 ,
                      (6): 4.858812e+00 ,
                      (7): 4.858812e+00 ,
                      (8): 4.858812e+00 ,  
                      (9): 4.858812e+00 ,
                     (10): 4.858812e+00 ,
                     (11): 4.858812e+00 ,
                     (12): 4.858812e+00 ,
                     (13): 4.858812e+00 ,
                     (14): 4.858812e+00 ,
                     (15): 4.858812e+00 ,
                     (16): 4.858812e+00 ,
                     (17): 4.858812e+00 ,
                     (18): 4.858812e+00 ,
                     (19): 4.858812e+00 ,
                     (20): 4.858812e+00 ,
                     (21): 4.858812e+00 ,
                     (22): 4.858812e+00 ,
                     (23): 4.858812e+00 ,
                     (24): 4.858812e+00 ,
                     (25): 4.858812e+00 ,
                     (26): 4.858812e+00 ,
                     (27): 4.858812e+00 ,
                     (28): 4.858812e+00 ,
                     (29): 4.858812e+00 ,
                     (30): 4.858812e+00 ,
                     (31): 4.858812e+00 ,
                     (32): 4.858812e+00 ,
                     (33): 4.858812e+00 ,
                     (34): 4.858812e+00 ,
                     (35): 4.858812e+00 ,
                     (36): 4.858812e+00 ,
                     (37): 4.858812e+00 ,
                     (38): 4.858812e+00 ,
                     (39): 4.858812e+00 ,
                     (40): 4.858812e+00 })  

m.V2ref       = Param(m.set_1_NTm1,
        initialize={  (1): 2.694203e+00 ,
                      (2): 2.694203e+00 ,            
                      (3): 2.694203e+00 ,
                      (4): 2.694203e+00 ,
                      (5): 2.694203e+00 ,
                      (6): 2.694203e+00 ,
                      (7): 2.694203e+00 ,
                      (8): 2.694203e+00 ,  
                      (9): 2.694203e+00 ,
                     (10): 2.694203e+00 ,
                     (11): 2.694203e+00 ,
                     (12): 2.694203e+00 ,
                     (13): 2.694203e+00 ,
                     (14): 2.694203e+00 ,
                     (15): 2.694203e+00 ,
                     (16): 2.694203e+00 ,
                     (17): 2.694203e+00 ,
                     (18): 2.694203e+00 ,
                     (19): 2.694203e+00 ,
                     (20): 2.694203e+00 ,
                     (21): 2.694203e+00 ,
                     (22): 2.694203e+00 ,
                     (23): 2.694203e+00 ,
                     (24): 2.694203e+00 ,
                     (25): 2.694203e+00 ,
                     (26): 2.694203e+00 ,
                     (27): 2.694203e+00 ,
                     (28): 2.694203e+00 ,
                     (29): 2.694203e+00 ,
                     (30): 2.694203e+00 ,
                     (31): 2.694203e+00 ,
                     (32): 2.694203e+00 ,
                     (33): 2.694203e+00 ,
                     (34): 2.694203e+00 ,
                     (35): 2.694203e+00 ,
                     (36): 2.694203e+00 ,
                     (37): 2.694203e+00 ,
                     (38): 2.694203e+00 ,
                     (39): 2.694203e+00 ,
                     (40): 2.694203e+00 })  

m.L1ref       = Param(m.set_2_NT,
        initialize={  (2): 5.706642e+00 ,            
                      (3): 5.706642e+00 ,
                      (4): 5.706642e+00 ,
                      (5): 5.706642e+00 ,
                      (6): 5.706642e+00 ,
                      (7): 5.706642e+00 ,
                      (8): 5.706642e+00 ,  
                      (9): 5.706642e+00 ,
                     (10): 5.706642e+00 ,
                     (11): 5.706642e+00 ,
                     (12): 5.706642e+00 ,
                     (13): 5.706642e+00 ,
                     (14): 5.706642e+00 ,
                     (15): 5.706642e+00 ,
                     (16): 5.706642e+00 ,
                     (17): 5.706642e+00 ,
                     (18): 5.706642e+00 ,
                     (19): 5.706642e+00 ,
                     (20): 5.706642e+00 ,
                     (21): 5.706642e+00 ,
                     (22): 4.296642e+00 ,
                     (23): 4.296642e+00 ,
                     (24): 4.296642e+00 ,
                     (25): 4.296642e+00 ,
                     (26): 4.296642e+00 ,
                     (27): 4.296642e+00 ,
                     (28): 4.296642e+00 ,
                     (29): 4.296642e+00 ,
                     (30): 4.296642e+00 ,
                     (31): 4.296642e+00 ,
                     (32): 4.296642e+00 ,
                     (33): 4.296642e+00 ,
                     (34): 4.296642e+00 ,
                     (35): 4.296642e+00 ,
                     (36): 4.296642e+00 ,
                     (37): 4.296642e+00 ,
                     (38): 4.296642e+00 ,
                     (39): 4.296642e+00 ,
                     (40): 4.296642e+00 ,
                     (41): 4.296642e+00  })

m.L2ref       = Param(m.set_2_NT,
        initialize={  (2): 3.258059e+00 ,            
                      (3): 3.258059e+00 ,
                      (4): 3.258059e+00 ,
                      (5): 3.258059e+00 ,
                      (6): 3.258059e+00 ,
                      (7): 3.258059e+00 ,
                      (8): 3.258059e+00 ,  
                      (9): 3.258059e+00 ,
                     (10): 3.258059e+00 ,
                     (11): 3.258059e+00 ,
                     (12): 3.258059e+00 ,
                     (13): 3.258059e+00 ,
                     (14): 3.258059e+00 ,
                     (15): 3.258059e+00 ,
                     (16): 3.258059e+00 ,
                     (17): 3.258059e+00 ,
                     (18): 3.258059e+00 ,
                     (19): 3.258059e+00 ,
                     (20): 3.258059e+00 ,
                     (21): 3.258059e+00 ,
                     (22): 2.410230e+00 ,
                     (23): 2.410230e+00 ,
                     (24): 2.410230e+00 ,
                     (25): 2.410230e+00 ,
                     (26): 2.410230e+00 ,
                     (27): 2.410230e+00 ,
                     (28): 2.410230e+00 ,
                     (29): 2.410230e+00 ,
                     (30): 2.410230e+00 ,
                     (31): 2.410230e+00 ,
                     (32): 2.410230e+00 ,
                     (33): 2.410230e+00 ,
                     (34): 2.410230e+00 ,
                     (35): 2.410230e+00 ,
                     (36): 2.410230e+00 ,
                     (37): 2.410230e+00 ,
                     (38): 2.410230e+00 ,
                     (39): 2.410230e+00 ,
                     (40): 2.410230e+00 ,
                     (41): 2.410230e+00  })

m.D1ref       = Param(initialize=5.621708e-01)          
m.B1ref       = Param(initialize=8.478292e-01)         
m.D2ref       = Param(initialize=2.839724e-01)          
m.B2ref       = Param(initialize=5.638568e-01)          
m.y_1_1ref    = Param(m.set_1_NTm1,m.set_1_2,
        initialize={  (1,1): 2.562541e-02 ,  (1,2): 4.829437e-01,
                      (2,1): 4.098278e-02 ,  (2,2): 5.972174e-01,            
                      (3,1): 6.103090e-02 ,  (3,2): 6.971660e-01,
                      (4,1): 8.609939e-02 ,  (4,2): 7.767788e-01,
                      (5,1): 1.164171e-01 ,  (5,2): 8.337157e-01,
                      (6,1): 1.521794e-01 ,  (6,2): 8.686715e-01,
                      (7,1): 1.935638e-01 ,  (7,2): 8.841280e-01,
                      (8,1): 2.406843e-01 ,  (8,2): 8.832260e-01,  
                      (9,1): 2.935063e-01 ,  (9,2): 8.690704e-01,
                     (10,1): 3.517505e-01 , (10,2): 8.444439e-01,
                     (11,1): 4.148134e-01 , (11,2): 8.117744e-01,
                     (12,1): 4.817306e-01 , (12,2): 7.732093e-01,
                     (13,1): 5.511980e-01 , (13,2): 7.306991e-01,
                     (14,1): 6.216558e-01 , (14,2): 6.860416e-01,
                     (15,1): 6.914255e-01 , (15,2): 6.408774e-01,
                     (16,1): 7.588724e-01 , (16,2): 5.966489e-01,
                     (17,1): 8.225612e-01 , (17,2): 5.545477e-01,
                     (18,1): 8.813726e-01 , (18,2): 5.154729e-01,
                     (19,1): 9.345645e-01 , (19,2): 4.800172e-01,
                     (20,1): 9.817746e-01 , (20,2): 4.484830e-01,
                     (21,1): 1.022977e+00 , (21,2): 4.209244e-01,
                     (22,1): 1.143210e+00 , (22,2): 4.291020e-01,
                     (23,1): 1.250467e+00 , (23,2): 4.213496e-01,
                     (24,1): 1.344260e+00 , (24,2): 4.016301e-01,
                     (25,1): 1.425955e+00 , (25,2): 3.740711e-01,
                     (26,1): 1.497496e+00 , (26,2): 3.421336e-01,
                     (27,1): 1.560686e+00 , (27,2): 3.083942e-01,
                     (28,1): 1.616932e+00 , (28,2): 2.746366e-01,
                     (29,1): 1.667241e+00 , (29,2): 2.420325e-01,
                     (30,1): 1.712316e+00 , (30,2): 2.113123e-01,
                     (31,1): 1.752657e+00 , (31,2): 1.828959e-01,
                     (32,1): 1.788652e+00 , (32,2): 1.569876e-01,
                     (33,1): 1.820632e+00 , (33,2): 1.336417e-01,
                     (34,1): 1.848906e+00 , (34,2): 1.128099e-01,
                     (35,1): 1.873776e+00 , (35,2): 9.437491e-02,
                     (36,1): 1.895541e+00 , (36,2): 7.817661e-02,
                     (37,1): 1.914500e+00 , (37,2): 6.403026e-02,
                     (38,1): 1.930941e+00 , (38,2): 5.174077e-02,
                     (39,1): 1.945144e+00 , (39,2): 4.111265e-02,
                     (40,1): 1.957370e+00 , (40,2): 3.195703e-02 })

m.y_1_2ref    = Param(m.set_1_NTm1,m.set_1_2, 
        initialize={  (1,1): 1.173794e+00 ,  (1,2): 1.173794e+00,
                      (2,1): 1.219564e+00 ,  (2,2): 1.219564e+00, 
                      (3,1): 1.262904e+00 ,  (3,2): 1.262904e+00,
                      (4,1): 1.301976e+00 ,  (4,2): 1.301976e+00,
                      (5,1): 1.336114e+00 ,  (5,2): 1.336114e+00,
                      (6,1): 1.365647e+00 ,  (6,2): 1.365647e+00,
                      (7,1): 1.391491e+00 ,  (7,2): 1.391491e+00,
                      (8,1): 1.414751e+00 ,  (8,2): 1.414751e+00, 
                      (9,1): 1.436443e+00 ,  (9,2): 1.436443e+00,
                     (10,1): 1.457357e+00 , (10,2): 1.457357e+00,
                     (11,1): 1.477998e+00 , (11,2): 1.477998e+00,
                     (12,1): 1.498602e+00 , (12,2): 1.498602e+00,
                     (13,1): 1.519165e+00 , (13,2): 1.519165e+00,
                     (14,1): 1.539508e+00 , (14,2): 1.539508e+00,
                     (15,1): 1.559339e+00 , (15,2): 1.559339e+00,
                     (16,1): 1.578319e+00 , (16,2): 1.578319e+00,
                     (17,1): 1.596130e+00 , (17,2): 1.596130e+00,
                     (18,1): 1.612511e+00 , (18,2): 1.612511e+00,
                     (19,1): 1.627288e+00 , (19,2): 1.627288e+00,
                     (20,1): 1.640382e+00 , (20,2): 1.640382e+00,
                     (21,1): 1.651796e+00 , (21,2): 1.651796e+00,
                     (22,1): 1.714639e+00 , (22,2): 1.714639e+00,
                     (23,1): 1.765683e+00 , (23,2): 1.765683e+00,
                     (24,1): 1.806007e+00 , (24,2): 1.806007e+00,
                     (25,1): 1.837668e+00 , (25,2): 1.837668e+00,
                     (26,1): 1.862793e+00 , (26,2): 1.862793e+00,
                     (27,1): 1.883141e+00 , (27,2): 1.883141e+00,
                     (28,1): 1.900012e+00 , (28,2): 1.900012e+00,
                     (29,1): 1.914298e+00 , (29,2): 1.914298e+00,
                     (30,1): 1.926595e+00 , (30,2): 1.926595e+00,
                     (31,1): 1.937294e+00 , (31,2): 1.937294e+00,
                     (32,1): 1.946655e+00 , (32,2): 1.946655e+00,
                     (33,1): 1.954863e+00 , (33,2): 1.954863e+00,
                     (34,1): 1.962057e+00 , (34,2): 1.962057e+00,
                     (35,1): 1.968346e+00 , (35,2): 1.968346e+00,
                     (36,1): 1.973830e+00 , (36,2): 1.973830e+00,
                     (37,1): 1.978593e+00 , (37,2): 1.978593e+00,
                     (38,1): 1.982718e+00 , (38,2): 1.982718e+00,
                     (39,1): 1.986276e+00 , (39,2): 1.986276e+00,
                     (40,1): 1.989337e+00 , (40,2): 1.989337e+00 })
        
m.y_2_1ref    = Param(m.set_1_NTm1,m.set_1_2,
        initialize={  (1,1): 8.317138e-07 ,  (1,2): 8.500598e-03,
                      (2,1): 1.515600e-06 ,  (2,2): 1.198552e-02,            
                      (3,1): 2.640568e-06 ,  (3,2): 1.627885e-02,
                      (4,1): 4.487521e-06 ,  (4,2): 2.155448e-02,
                      (5,1): 7.512755e-06 ,  (5,2): 2.801659e-02,
                      (6,1): 1.245405e-05 ,  (6,2): 3.590133e-02,
                      (7,1): 2.049761e-05 ,  (7,2): 4.547636e-02,
                      (8,1): 3.353776e-05 ,  (8,2): 5.703725e-02,  
                      (9,1): 5.457524e-05 ,  (9,2): 7.089912e-02,
                     (10,1): 8.831804e-05 , (10,2): 8.738191e-02,
                     (11,1): 1.420703e-04 , (11,2): 1.067876e-01,
                     (12,1): 2.270177e-04 , (12,2): 1.293690e-01,
                     (13,1): 3.600409e-04 , (13,2): 1.552902e-01,
                     (14,1): 5.662017e-04 , (14,2): 1.845820e-01,
                     (15,1): 8.820563e-04 , (15,2): 2.170991e-01,
                     (16,1): 1.359946e-03 , (16,2): 2.524856e-01,
                     (17,1): 2.073417e-03 , (17,2): 2.901618e-01,
                     (18,1): 3.123933e-03 , (18,2): 3.293372e-01,
                     (19,1): 4.649101e-03 , (19,2): 3.690546e-01,
                     (20,1): 6.832735e-03 , (20,2): 4.082593e-01,
                     (21,1): 9.917146e-03 , (21,2): 4.458805e-01,
                     (22,1): 1.020548e-02 , (22,2): 4.801917e-01,
                     (23,1): 1.056768e-02 , (23,2): 5.231254e-01,
                     (24,1): 1.101354e-02 , (24,2): 5.756607e-01,
                     (25,1): 1.154938e-02 , (25,2): 6.382139e-01,
                     (26,1): 1.217610e-02 , (26,2): 7.103187e-01,
                     (27,1): 1.288832e-02 , (27,2): 7.903898e-01,
                     (28,1): 1.367568e-02 , (28,2): 8.757027e-01,
                     (29,1): 1.452734e-02 , (29,2): 9.626781e-01,
                     (30,1): 1.543948e-02 , (30,2): 1.047439e+00,
                     (31,1): 1.642498e-02 , (31,2): 1.126466e+00,
                     (32,1): 1.752390e-02 , (32,2): 1.197126e+00,
                     (33,1): 1.881465e-02 , (33,2): 1.257914e+00,
                     (34,1): 2.042718e-02 , (34,2): 1.308389e+00,
                     (35,1): 2.256079e-02 , (35,2): 1.348907e+00,
                     (36,1): 2.551089e-02 , (36,2): 1.380281e+00,
                     (37,1): 2.970914e-02 , (37,2): 1.403455e+00,
                     (38,1): 3.578287e-02 , (38,2): 1.419250e+00,
                     (39,1): 4.464069e-02 , (39,2): 1.428176e+00,
                     (40,1): 5.759176e-02 , (40,2): 1.430277e+00 })
        
m.y_2_2ref    = Param(m.set_1_NTm1,m.set_1_2,
        initialize={  (1,1): 1.002834e+00 ,  (1,2): 1.002834e+00,
                      (2,1): 1.003996e+00 ,  (2,2): 1.003996e+00,            
                      (3,1): 1.005428e+00 ,  (3,2): 1.005428e+00,
                      (4,1): 1.007187e+00 ,  (4,2): 1.007187e+00,
                      (5,1): 1.009343e+00 ,  (5,2): 1.009343e+00,
                      (6,1): 1.011973e+00 ,  (6,2): 1.011973e+00,
                      (7,1): 1.015169e+00 ,  (7,2): 1.015169e+00,
                      (8,1): 1.019029e+00 ,  (8,2): 1.019029e+00,  
                      (9,1): 1.023660e+00 ,  (9,2): 1.023660e+00,
                     (10,1): 1.029171e+00 , (10,2): 1.029171e+00,
                     (11,1): 1.035667e+00 , (11,2): 1.035667e+00,
                     (12,1): 1.043237e+00 , (12,2): 1.043237e+00,
                     (13,1): 1.051943e+00 , (13,2): 1.051943e+00,
                     (14,1): 1.061810e+00 , (14,2): 1.061810e+00,
                     (15,1): 1.072807e+00 , (15,2): 1.072807e+00,
                     (16,1): 1.084842e+00 , (16,2): 1.084842e+00,
                     (17,1): 1.097757e+00 , (17,2): 1.097757e+00,
                     (18,1): 1.111341e+00 , (18,2): 1.111341e+00,
                     (19,1): 1.125343e+00 , (19,2): 1.125343e+00,
                     (20,1): 1.139503e+00 , (20,2): 1.139503e+00,
                     (21,1): 1.153585e+00 , (21,2): 1.153585e+00,
                     (22,1): 1.165167e+00 , (22,2): 1.165167e+00,
                     (23,1): 1.179659e+00 , (23,2): 1.179659e+00,
                     (24,1): 1.197394e+00 , (24,2): 1.197394e+00,
                     (25,1): 1.218513e+00 , (25,2): 1.218513e+00,
                     (26,1): 1.242861e+00 , (26,2): 1.242861e+00,
                     (27,1): 1.269907e+00 , (27,2): 1.269907e+00,
                     (28,1): 1.298739e+00 , (28,2): 1.298739e+00,
                     (29,1): 1.328156e+00 , (29,2): 1.328156e+00,
                     (30,1): 1.356866e+00 , (30,2): 1.356866e+00,
                     (31,1): 1.383701e+00 , (31,2): 1.383701e+00,
                     (32,1): 1.407804e+00 , (32,2): 1.407804e+00,
                     (33,1): 1.428712e+00 , (33,2): 1.428712e+00,
                     (34,1): 1.446343e+00 , (34,2): 1.446343e+00,
                     (35,1): 1.460916e+00 , (35,2): 1.460916e+00,
                     (36,1): 1.472849e+00 , (36,2): 1.472849e+00,
                     (37,1): 1.482673e+00 , (37,2): 1.482673e+00,
                     (38,1): 1.490975e+00 , (38,2): 1.490975e+00,
                     (39,1): 1.498379e+00 , (39,2): 1.498379e+00,
                     (40,1): 1.505555e+00 , (40,2): 1.505555e+00 })

m.pVref       = Param()         
m.VB1ref      = Param(initialize=4.858812e+00)         
m.VB2ref      = Param(initialize=2.694203e+00)          
m.LT1ref      = Param(initialize=4.296642e+00)             
m.LT2ref      = Param(initialize=2.410230e+00)         
m.TC1ref      = Param(m.set_1_NT,
        initialize={  (1): 4.018359e+02 ,
                      (2): 3.992788e+02 ,            
                      (3): 3.968497e+02 ,
                      (4): 3.946500e+02 ,
                      (5): 3.927163e+02 ,
                      (6): 3.910301e+02 ,
                      (7): 3.895404e+02 ,
                      (8): 3.881858e+02 ,  
                      (9): 3.869101e+02 ,
                     (10): 3.856700e+02 ,
                     (11): 3.844382e+02 ,
                     (12): 3.832030e+02 ,
                     (13): 3.819666e+02 ,
                     (14): 3.807409e+02 ,
                     (15): 3.795446e+02 ,
                     (16): 3.783987e+02 ,
                     (17): 3.773228e+02 ,
                     (18): 3.763330e+02 ,
                     (19): 3.754399e+02 ,
                     (20): 3.746484e+02 ,
                     (21): 3.739583e+02 ,
                     (22): 3.703085e+02 ,
                     (23): 3.673305e+02 ,
                     (24): 3.649653e+02 ,
                     (25): 3.630969e+02 ,
                     (26): 3.616048e+02 ,
                     (27): 3.603890e+02 ,
                     (28): 3.593757e+02 ,
                     (29): 3.585137e+02 ,
                     (30): 3.577694e+02 ,
                     (31): 3.571202e+02 ,
                     (32): 3.565512e+02 ,
                     (33): 3.560517e+02 ,
                     (34): 3.556136e+02 ,
                     (35): 3.552303e+02 ,
                     (36): 3.548961e+02 ,
                     (37): 3.546056e+02 ,
                     (38): 3.543541e+02 ,
                     (39): 3.541371e+02 ,
                     (40): 3.539504e+02 ,
                     (41): 3.537903e+02  })

m.TC2ref      = Param(m.set_1_NT,
        initialize={  (1): 4.113430e+02 ,
                      (2): 4.112786e+02 ,            
                      (3): 4.111993e+02 ,
                      (4): 4.111018e+02 ,
                      (5): 4.109824e+02 ,
                      (6): 4.108367e+02 ,
                      (7): 4.106596e+02 ,
                      (8): 4.104457e+02 ,  
                      (9): 4.101891e+02 ,
                     (10): 4.098838e+02 ,
                     (11): 4.095239e+02 ,
                     (12): 4.091044e+02 ,
                     (13): 4.086218e+02 ,
                     (14): 4.080749e+02 ,
                     (15): 4.074652e+02 ,
                     (16): 4.067979e+02 ,
                     (17): 4.060813e+02 ,
                     (18): 4.053273e+02 ,
                     (19): 4.045495e+02 ,
                     (20): 4.037620e+02 ,
                     (21): 4.029775e+02 ,
                     (22): 4.023355e+02 ,
                     (23): 4.015321e+02 ,
                     (24): 4.005490e+02 ,
                     (25): 3.993782e+02 ,
                     (26): 3.980285e+02 ,
                     (27): 3.965291e+02 ,
                     (28): 3.949307e+02 ,
                     (29): 3.932998e+02 ,
                     (30): 3.917080e+02 ,
                     (31): 3.902200e+02 ,
                     (32): 3.888831e+02 ,
                     (33): 3.877230e+02 ,
                     (34): 3.867440e+02 ,
                     (35): 3.859337e+02 ,
                     (36): 3.852684e+02 ,
                     (37): 3.847183e+02 ,
                     (38): 3.842499e+02 ,
                     (39): 3.838273e+02 ,
                     (40): 3.834116e+02 ,
                     (41): 3.829587e+02  })

m.a           = Param(initialize=0)          
m.b           = Param(initialize=1)

m.F_w         = Param()        
m.qF_w        = Param()       
m.y1_w        = Param(m.set_1_NTm1,m.set_1_2)      
m.y2_w        = Param(m.set_1_NTm1,m.set_1_2)     
m.x1_w        = Param(m.set_1_NT,m.set_1_2)      
m.x2_w        = Param(m.set_1_NT,m.set_1_2)       
m.M1_w        = Param(m.set_1_NT)         
m.M2_w        = Param(m.set_1_NT)             
m.V1_w        = Param(m.set_1_NTm1)           
m.V2_w        = Param(m.set_1_NTm1)          
m.L1_w        = Param(m.set_2_NT)             
m.L2_w        = Param(m.set_2_NT)               
m.D1_2        = Param()        
m.B1_w        = Param()         
m.D2_w        = Param()           
m.B2_w        = Param()         
m.y_1_1_w     = Param(m.set_1_NTm1,m.set_1_2)               
m.y_1_2_w     = Param(m.set_1_NTm1,m.set_1_2)                
m.y_2_1_w     = Param(m.set_1_NTm1,m.set_1_2)           
m.y_2_2_w     = Param(m.set_1_NTm1,m.set_1_2)            
m.pV_w        = Param()         
m.VB1_w       = Param()             
m.VB2_w       = Param()             
m.LT1_w       = Param()          
m.LT2_w       = Param()           
m.TC1_w       = Param(m.set_1_NT)            
m.TC2_w       = Param(m.set_1_NT)         

# Disturbances...
m.F           = Param(m.fe,initialize=1.41,mutable=True)           
m.qF          = Param(m.fe,initialize=1.00,mutable=True)          
m.pV          = Param(m.fe,initialize=8.0e-3,mutable=True)      
def zF_init(m,f,j):
    return nominal_zF_dict[j]
m.zF          = Param(m.fe,m.comp,initialize=zF_init,mutable=True)

# These initializations are added to allow the program to run, not sure if they should be there
m.F_r         = Param(initialize=m.F[0].value,mutable=True)
m.zF_r        = Param(m.comp,initialize=nominal_zF_dict,mutable=True)         
m.F_rand      = Param(m.set_0_Km1,mutable=True)                 
m.zF_rand     = Param(m.set_0_Km1,m.comp,mutable=True)                      

# Relative Volatilities (const) [alpha(A/B), alpha(B/C)]
alpha_dict    = {1:2.00,2:1.50}
m.alpha       = Param(m.set_1_2, initialize=alpha_dict) 
alpha_m_dict= {(1,1):2.00, (1,2):0.00,
               (2,1):0.00, (2,2):1.50}
m.alpha_m     = Param(m.set_1_2,m.set_1_2, initialize=alpha_m_dict)                      

# Franci's Weir Formula: L(i) = K*Mow(i)^1.5
m.Kuf         = Param(initialize=21.65032) # constant above feed                  
m.Kbf         = Param(initialize=29.65032) # constant below feed              
m.Muw         = Param(initialize=0.25)     # liquid holdup under weir (kmol)       
m.M0          = Param(initialize = 0.5)    # nominal liquid holdups           

# Prices: 
m.pF          = Param(initialize=1.0)      # feed price ($)
m.pA          = Param(initialize=1.0)      # light comp price($)        
m.pB          = Param(initialize=2.0)      # medium comp price ($)       
m.pC          = Param(initialize=1.0)      # heavy comp price ($)        
               
# ----
# Variables
# ----

### vtr
m.vk = Var()
m.lk = Var()

##################
## FIRST COLUMN ##
##################
LT1_dict = {}
for i in m.fe: LT1_dict[i] = 3.43656
m.LT1 = Var(m.fe,within=NonNegativeReals, bounds=(0,10), initialize=LT1_dict)
VB1_dict = {}
for i in m.fe: VB1_dict[i] = 4.008
m.VB1 = Var(m.fe,within=NonNegativeReals, bounds=(0,10), initialize=VB1_dict)

# component fraction liquid and vapor
m.y1   = Var(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,bounds=(0,1),initialize=0.3) # vapor frac
m.x1   = Var(m.set_1_NT,  m.set_1_2,m.fe,m.cp,bounds=(0,1),initialize=0.4) # liquid frac
m.x1_0 = Var(m.set_1_NT,m.set_1_2,m.fep,bounds=(0,1))
m.M1_0 = Var(m.set_1_NT,m.fep,within=NonNegativeReals)  
m.M1   = Var(m.set_1_NT,m.fe,m.cp,within=NonNegativeReals,initialize=0.5)                        # holdup
m.V1   = Var(m.set_1_NTm1,m.fe,initialize=1)                             # vapor flow
m.L1   = Var(m.set_2_NT,m.fe,m.cp,initialize=1)                          # liquid flow
m.L1_0 = Var(m.set_2_NT,m.fep)                                       
m.D1   = Var(m.fe,initialize=0.57)                                       # distillate flow
m.B1   = Var(m.fe,initialize=0.83)                                       # bottoms flow 
# ^ significance of variables that aren't defined at CP's? Alg variables? 
# ??? WHAT ARE *_0 ??? 
# they're just the variables at the 0th collocation point

# slack variables
m.x1eps  = Var(m.set_1_NT,m.set_1_2,m.fep,within=NonNegativeReals,initialize=0)
m.M1eps  = Var(m.set_1_NT,m.fep,within=NonNegativeReals,initialize=0)
m.V1eps  = Var(m.set_1_NTm1,m.fe,within=NonNegativeReals,initialize=0)
m.L1eps  = Var(m.set_2_NT,m.fe,within=NonNegativeReals,initialize=0)
m.D1eps  = Var(m.fe,within=NonNegativeReals,initialize=0)
m.B1eps  = Var(m.fe,within=NonNegativeReals,initialize=0) 
m.TC1eps = Var(m.set_1_NT,m.fep,within=NonNegativeReals,initialize=0)

# soft constraints:
# (soft constraints determine the *eps variables, which are penalized) 

# does this x1_0 constraint do anything????
def x1lower_rule(m,i,j,f):
    return m.x1_0[i,j,f] >= -m.x1eps[i,j,f] 
m.x1lower = Constraint(m.set_1_NT,m.set_1_2,m.fe,rule=x1lower_rule)

def M1lower_rule(m,i,f):
    return m.M1_0[i,f] >= 0.25 - m.M1eps[i,f]
m.M1lower = Constraint(m.set_1_NT,m.fe,rule=M1lower_rule)

def M1upper_rule(m,i,f,c):
    return m.M1_0[i,f] <= 0.75 + m.M1eps[i,f]
m.M1upper = Constraint(m.set_1_NT,m.fe,m.cp,rule=M1upper_rule)

def V1lower_rule(m,i,f):
    return m.V1[i,f] >= 0 - m.V1eps[i,f]
m.V1lower = Constraint(m.set_1_NTm1,m.fe,rule=V1lower_rule)

def L1lower_rule(m,i,f):
    return m.L1_0[i,f] >= -m.L1eps[i,f]
m.L1lower = Constraint(m.set_2_NT,m.fe,rule=L1lower_rule)

def D1lower_rule(m,f):
    return m.D1[f] >= -m.D1eps[f]
m.D1lower = Constraint(m.fe,rule=D1lower_rule)

def B1lower_rule(m,f):
    return m.B1[f] >= -m.B1eps[f] 
m.B1lower = Constraint(m.fe,rule=B1lower_rule)

# VLE equation split
m.y_1_1 = Var(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,within=NonNegativeReals,initialize=0.2)
m.y_1_2 = Var(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,within=NonNegativeReals,initialize=0.7)
# These variables are "defined" (per ampl) according to others
# I think this funcionality is best reproduced by pyomo expressions
def y_1_1_0_rule(m,i,j,f):
    return m.x1_0[i,j,f]*m.alpha_m[j,j] 
m.y_1_1_0 = Expression(m.set_1_NTm1,m.set_1_2,m.fe,rule=y_1_1_0_rule)

def y_1_2_0_rule(m,i,j,f):
    return ((m.x1_0[i,1,f]*(m.alpha[1]-1)+m.x1_0[i,2,f]*(m.alpha[2]-1))+1)
m.y_1_2_0 = Expression(m.set_1_NTm1,m.set_1_2,m.fe,rule=y_1_2_0_rule)

def y1_0_rule(m,i,j,f):
    return m.y_1_1_0[i,j,f] / m.y_1_2_0[i,j,f] 
m.y1_0 = Expression(m.set_1_NTm1,m.set_1_2,m.fe,rule=y1_0_rule)
# ^ I am slightly incredulous that this is the best way to do things...

# TC1, SET1, and SET2 are not as in the original model (idk what this means just copying Devin)
m.TC1 = Var(m.set_1_NT,m.fep,initialize=380)
# m.SET1 = Var(initialize=-150)
# m.SET2 = Var(initialize=-100)
# m.SET3 = Var(initialize=-270)

# soft constraints
def TC1lower_rule(m,i,f):
    return m.TC1[i,f] >= 350 # - m.TC1eps[i,f]
m.TC1lower = Constraint(m.set_1_NT,m.fep,rule=TC1lower_rule)

def TC1upper_rule(m,i,f):
    return m.TC1[i,f] <= 412 # + m.TC1eps[i,f]
m.TC1upper = Constraint(m.set_1_NT,m.fep,rule=TC1upper_rule)

# real states (according to plant model) 
# how are these solved for? 
# (the *_r constraints, obviously...) 
# (why only defined at col points?)
# only need values for one sampling period at a time 
m.y1_r    = Var(m.set_1_NTm1,m.set_1_2,m.cp,bounds=(0,1),initialize=0.3) # vapor comp
m.x1_r    = Var(m.set_1_NT,m.set_1_2,m.cp,bounds=(0,1),initialize=0.4)   # liquid comp
m.M1_r    = Var(m.set_1_NT,m.cp,within=NonNegativeReals,initialize=0.5)             # holdup
m.L1_r    = Var(m.set_2_NT,m.cp,within=NonNegativeReals,initialize=1)               # liquid flow
m.y_1_1_r = Var(m.set_1_NTm1,m.set_1_2,m.cp,within=NonNegativeReals,initialize=0.2)
m.y_1_2_r = Var(m.set_1_NTm1,m.set_1_2,m.cp,within=NonNegativeReals,initialize=0.7)


###################
## SECOND COLUMN ##
###################

m.LT2 = Var(m.fe,within=NonNegativeReals, bounds=(0,10), initialize=2.13827)
m.VB2 = Var(m.fe,within=NonNegativeReals, bounds=(0,10), initialize=2.40367)

# component fraction liquid and vapor
m.y2   = Var(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,bounds=(0,1),initialize=0.5) # vapor frac
m.x2   = Var(m.set_1_NT,  m.set_1_2,m.fe,m.cp,bounds=(0,1),initialize=0.4) # liquid frac
m.x2_0 = Var(m.set_1_NT,m.set_1_2,m.fep,bounds=(0,1))
m.M2_0 = Var(m.set_1_NT,m.fep,within=NonNegativeReals)  
m.M2   = Var(m.set_1_NT,m.fe,m.cp,within=NonNegativeReals,initialize=0.5)                        # holdup
m.V2   = Var(m.set_1_NTm1,m.fe,initialize=1)                             # vapor flow
m.L2   = Var(m.set_2_NT,m.fe,m.cp,initialize=1)                          # liquid flow
m.L2_0 = Var(m.set_2_NT,m.fep)                                       
m.D2   = Var(m.fe,initialize=0.26)                                       # distillate flow
m.B2   = Var(m.fe,initialize=0.56)                                       # bottoms flow 

# slack variable
m.x2eps   = Var(m.set_1_NT,m.set_1_2,m.fep,within=NonNegativeReals,initialize=0)
m.x2ceps  = Var(m.fep,within=NonNegativeReals,initialize=0)
m.M2eps   = Var(m.set_1_NT,m.fep,within=NonNegativeReals,initialize=0)
m.V2eps   = Var(m.set_1_NTm1,m.fe,within=NonNegativeReals,initialize=0)
m.L2eps   = Var(m.set_2_NT,m.fe,within=NonNegativeReals,initialize=0)
m.D2eps   = Var(m.fe,within=NonNegativeReals,initialize=0)
m.B2eps   = Var(m.fe,within=NonNegativeReals,initialize=0) 
m.TC2eps  = Var(m.set_1_NT,m.fep,within=NonNegativeReals,initialize=0)
m.termeps = Var(within=NonNegativeReals,initialize=0)
m.desceps = Var(within=NonNegativeReals,initialize=0)

# soft constraints:

def x2lower_rule(m,i,j,f):
    return m.x2_0[i,j,f] >= -m.x2eps[i,j,f] 
m.x2lower = Constraint(m.set_1_NT,m.set_1_2,m.fe,rule=x2lower_rule)

def M2lower_rule(m,i,f):
    return m.M2_0[i,f] >= 0.25 - m.M2eps[i,f]
m.M2lower = Constraint(m.set_1_NT,m.fe,rule=M2lower_rule)

def M2upper_rule(m,i,f):
    return m.M2_0[i,f] <= 0.75 + m.M2eps[i,f]
m.M2upper = Constraint(m.set_1_NT,m.fe,rule=M2upper_rule)

def V2lower_rule(m,i,f):
    return m.V2[i,f] >= 0 - m.V2eps[i,f]
m.V2lower = Constraint(m.set_1_NTm1,m.fe,rule=V2lower_rule)

def L2lower_rule(m,i,f):
    return m.L2_0[i,f] >= -m.L2eps[i,f]
m.L2lower = Constraint(m.set_2_NT,m.fe,rule=L2lower_rule)

def D2lower_rule(m,f):
    return m.D2[f] >= -m.D2eps[f]
m.D2lower = Constraint(m.fe,rule=D2lower_rule)

def B2lower_rule(m,f):
    return m.B2[f] >= -m.B2eps[f] 
m.B2lower = Constraint(m.fe,rule=B2lower_rule)

def const45_rule(m,f):
    return m.x1_0[NT,1,f] >= 0.95-m.x1eps[NT,1,f]                  # xA
m.const45 = Constraint(m.fep,rule=const45_rule)

def const46_rule(m,f):
    return m.x2_0[NT,2,f] >= 0.95-m.x2eps[NT,2,f]                  # xB
m.const46 = Constraint(m.fep,rule=const46_rule)

def const47_rule(m,f):
    return 1 - (m.x2_0[1,1,f]+m.x2_0[1,2,f]) >= 0.95 - m.x2ceps[f] # xC, I can only assume
m.const47 = Constraint(m.fep,rule=const47_rule)

# VLE equation split
m.y_2_1 = Var(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,within=NonNegativeReals,initialize=0.3)
m.y_2_2 = Var(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,within=NonNegativeReals,initialize=0.8)
# These variables are "defined" (per ampl) according to others
# I think this funcionality is best reproduced by pyomo expressions
def y_2_1_0_rule(m,i,j,f):
    return m.x2_0[i,j,f]*m.alpha_m[j,j] 
m.y_2_1_0 = Expression(m.set_1_NTm1,m.set_1_2,m.fe,rule=y_2_1_0_rule)

def y_2_2_0_rule(m,i,j,f):
    return ((m.x2_0[i,1,f]*(m.alpha[1]-1)+m.x2_0[i,2,f]*(m.alpha[2]-1))+1)
m.y_2_2_0 = Expression(m.set_1_NTm1,m.set_1_2,m.fe,rule=y_2_2_0_rule)

def y2_0_rule(m,i,j,f):
    return m.y_2_1_0[i,j,f] / m.y_2_2_0[i,j,f] 
m.y2_0 = Expression(m.set_1_NTm1,m.set_1_2,m.fe,rule=y2_0_rule)  # vapor comp
# ^ I am slightly incredulous that this is the best way to do things...

# TC2 is not in the original model (idk what this means just copying Devin)
m.TC2 = Var(m.set_1_NT,m.fep,initialize=380)

# soft constraints
def TC2lower_rule(m,i,f):
    return m.TC2[i,f] >= 350 - m.TC2eps[i,f]
m.TC2lower = Constraint(m.set_1_NT,m.fep,rule=TC2lower_rule)

def TC2upper_rule(m,i,f):
    return m.TC2[i,f] <= 412 + m.TC2eps[i,f]
m.TC2upper = Constraint(m.set_1_NT,m.fep,rule=TC2upper_rule)

# real variables with uncertainty
m.y2_r    = Var(m.set_1_NTm1,m.set_1_2,m.cp,bounds=(0,1),initialize=0.3) # vapor comp
m.x2_r    = Var(m.set_1_NT,m.set_1_2,m.cp,bounds=(0,1),initialize=0.4)   # liquid comp
m.M2_r    = Var(m.set_1_NT,m.cp,within=NonNegativeReals,initialize=0.5)             # holdup
m.L2_r    = Var(m.set_2_NT,m.cp,within=NonNegativeReals,initialize=1)               # liquid flow
m.y_2_1_r = Var(m.set_1_NTm1,m.set_1_2,m.cp,bounds=(0,1),initialize=0.2)
m.y_2_2_r = Var(m.set_1_NTm1,m.set_1_2,m.cp,bounds=(0,1),initialize=0.7)


####################################
### Model Constraints 1 ############
####################################

### VLE equation split

def const1_rule(m,i,j,f,c):
    return m.y_1_1[i,j,f,c] == m.x1[i,j,f,c]*m.alpha_m[j,j]
m.const1 = Constraint(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,rule=const1_rule)

def const1_r_rule(m,i,j,c):
    return m.y_1_1_r[i,j,c] == m.x1_r[i,j,c]*m.alpha_m[j,j]
m.const1_r = Constraint(m.set_1_NTm1,m.set_1_2,m.cp,rule=const1_r_rule)

def const2_rule(m,i,j,f,c):
    return m.y_1_2[i,j,f,c] == ((m.x1[i,1,f,c]*(m.alpha[1]-1)+m.x1[i,2,f,c]*(m.alpha[2]-1))+1)
m.const2 = Constraint(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,rule=const2_rule)

def const2_r_rule(m,i,j,c):
    return m.y_1_2_r[i,j,c] == ((m.x1_r[i,1,c]*(m.alpha[1]-1)+m.x1_r[i,2,c]*(m.alpha[2]-1))+1)
m.const2_r = Constraint(m.set_1_NTm1,m.set_1_2,m.cp,rule=const2_r_rule)

# Vapor-liquid equilibria (multicomponent ideal VLE
# Stichlmair-Fair, 'Distillation', p.36, 1998)

def const3_rule(m,i,j,f,c):
    return m.y1[i,j,f,c]*m.y_1_2[i,j,f,c] == m.y_1_1[i,j,f,c]
m.const3 = Constraint(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,rule=const3_rule)

def const3_r_rule(m,i,j,c):
    return m.y1_r[i,j,c]*m.y_1_2_r[i,j,c] == m.y_1_1_r[i,j,c]
m.const3_r = Constraint(m.set_1_NTm1,m.set_1_2,m.cp,rule=const3_r_rule)

### Vapor flows assuming constant molar flows ###

def const4_rule(m,i,f):
    return m.V1[i,f] == m.VB1[f]                            # vapor flow below feed
m.const4 = Constraint(m.set_1_NFm1,m.fe,rule=const4_rule)

def const5_rule(m,i,f):
    return m.V1[i,f] == m.VB1[f] + (1-m.qF[f])*m.F[f]       # vapor flow above feed 
m.const5 = Constraint(m.set_NF_NTm1,m.fe,rule=const5_rule) 

### Liquid flows given by Franci's weir formula: L(i)=K*Mow(i)^1.5
### Liquid flow L(i) only depends on the holdup over the weir Mow(i)
### M(i) = Mow(i) + Muw(i) (Total holdup = holdup over weir + holdup below weir)

def const6_rule(m,i,f,c):
    return m.L1[i,f,c] == m.Kbf*( (m.M1[i,f,c] - m.Muw + sqrt( (m.M1[i,f,c] - m.Muw)**2 + 10**(-8)))/2 )**1.5 # liquid flow below feed
m.const6 = Constraint(m.set_2_NF,m.fe,m.cp,rule=const6_rule)

def const6_r_rule(m,i,c):
    return m.L1_r[i,c] == m.Kbf*( (m.M1_r[i,c] - m.Muw + sqrt( (m.M1_r[i,c] - m.Muw)**2 + 10**(-8)))/2 )**1.5 # liquid flow below feed (real)
m.const6_r = Constraint(m.set_2_NF,m.cp,rule=const6_r_rule)

def const7_rule(m,i,f,c):
    return m.L1[i,f,c] == m.Kuf*( (m.M1[i,f,c] - m.Muw + sqrt( (m.M1[i,f,c] - m.Muw)**2 + 10**(-8)))/2 )**1.5 # liquid flows above feed 
m.const7 = Constraint(m.set_NFp1_NTm1,m.fe,m.cp,rule=const7_rule)

def const7_r_rule(m,i,c):
    return m.L1_r[i,c] == m.Kuf*( (m.M1_r[i,c] - m.Muw + sqrt( (m.M1_r[i,c] - m.Muw)**2 + 10**(-8)))/2 )**1.5 # liquid flows above feed 
m.const7_r = Constraint(m.set_NFp1_NTm1,m.cp,rule=const7_r_rule)

def const8_rule(m,f,c):
    return m.L1[NT,f,c] == m.LT1[f]  # condenser's liquid flow
m.const8 = Constraint(m.fe,m.cp,rule=const8_rule)

def const8_r_rule(m,c):
    return m.L1_r[NT,c] == m.LT1[0]  # condneser's liquid flow
m.const8_r = Constraint(m.cp,rule=const8_r_rule)

### Material balances for total holdup and component holdup ###
m.M1dot = Var(m.set_1_NT,m.fe,m.cp)
def const11_rule(m,i,f,c):
    return m.M1dot[i,f,c] == m.L1[i+1,f,c] - m.L1[i,f,c] + m.V1[i-1,f] - m.V1[i,f] # dM below feed
m.const11 = Constraint(m.set_2_NFm1,m.fe,m.cp,rule=const11_rule)

m.M1dot_r = Var(m.set_1_NT,m.cp,initialize=0)
def const11_r_rule(m,i,c):
    return m.M1dot_r[i,c] == m.L1_r[i+1,c] - m.L1_r[i,c] + m.V1[i-1,0] - m.V1[i,0] # dM below feed
m.const11_r = Constraint(m.set_2_NFm1,m.cp,rule=const11_r_rule)

def const12_rule(m,i,f,c):
    return m.M1dot[i,f,c] == m.L1[i+1,f,c] - m.L1[i,f,c] + m.V1[i-1,f] - m.V1[i,f] # dM above feed
m.const12 = Constraint(m.set_NFp1_NTm1,m.fe,m.cp,rule=const12_rule)

def const12_r_rule(m,i,c):
    return m.M1dot_r[i,c] == m.L1_r[i+1,c] - m.L1_r[i,c] + m.V1[i-1,0] - m.V1[i,0] # dM above feed
m.const12_r = Constraint(m.set_NFp1_NTm1,m.cp,rule=const12_r_rule)

m.Mx1dot = Var(m.set_1_NT,m.set_1_2,m.fe,m.cp)
def const13_rule(m,i,j,f,c):
    return m.Mx1dot[i,j,f,c] == m.L1[i+1,f,c]*m.x1[i+1,j,f,c] - \
        m.L1[i,f,c]*m.x1[i,j,f,c] + m.V1[i-1,f]*m.y1[i-1,j,f,c] -\
        m.V1[i,f]*m.y1[i,j,f,c] 
m.const13 = Constraint(m.set_2_NFm1,m.set_1_2,m.fe,m.cp,rule=const13_rule)

m.Mx1dot_r = Var(m.set_1_NT,m.set_1_2,m.cp,initialize=0)
def const13_r_rule(m,i,j,c):
    return m.Mx1dot_r[i,j,c] == m.L1_r[i+1,c]*m.x1_r[i+1,j,c] - \
        m.L1_r[i,c]*m.x1_r[i,j,c] + m.V1[i-1,0]*m.y1_r[i-1,j,c] -\
        m.V1[i,0]*m.y1_r[i,j,c] 
m.const13_r = Constraint(m.set_2_NFm1,m.set_1_2,m.cp,rule=const13_r_rule)

def const14_rule(m,i,j,f,c):
    return m.Mx1dot[i,j,f,c] == m.L1[i+1,f,c]*m.x1[i+1,j,f,c] - \
        m.L1[i,f,c]*m.x1[i,j,f,c] + m.V1[i-1,f]*m.y1[i-1,j,f,c] -\
        m.V1[i,f]*m.y1[i,j,f,c] 
m.const14 = Constraint(m.set_NFp1_NTm1,m.set_1_2,m.fe,m.cp,rule=const14_rule)

def const14_r_rule(m,i,j,c):
    return m.Mx1dot_r[i,j,c] == m.L1_r[i+1,c]*m.x1_r[i+1,j,c] - \
        m.L1_r[i,c]*m.x1_r[i,j,c] + m.V1[i-1,0]*m.y1_r[i-1,j,c] -\
        m.V1[i,0]*m.y1_r[i,j,c] 
m.const14_r = Constraint(m.set_NFp1_NTm1,m.set_1_2,m.cp,rule=const14_r_rule)

### Correction at feed stage. Feed assumed to be (well?) mixed into feed stage.

def const15_rule(m,f,c):
    return m.M1dot[NF,f,c] == m.L1[NF+1,f,c] - m.L1[NF,f,c] + \
        m.V1[NF-1,f] - m.V1[NF,f] + m.F[f]
m.const15 = Constraint(m.fe,m.cp,rule=const15_rule)

def const15_r_rule(m,c):
    return m.M1dot_r[NF,c] == m.L1_r[NF+1,c] - m.L1_r[NF,c] + \
        m.V1[NF-1,0] - m.V1[NF,0] + m.F_r
m.const15_r = Constraint(m.cp,rule=const15_r_rule)

def const16_rule(m,f,c):
    return m.Mx1dot[NF,1,f,c] == m.L1[NF+1,f,c]*m.x1[NF+1,1,f,c]-\
        m.L1[NF,f,c]*m.x1[NF,1,f,c] + \
        m.V1[NF-1,f]*m.y1[NF-1,1,f,c]-m.V1[NF,f]*m.y1[NF,1,f,c] +\
        m.F[f]*m.zF[f,1] 
m.const16 = Constraint(m.fe,m.cp,rule=const16_rule)

def const16_r_rule(m,c):
    return m.Mx1dot_r[NF,1,c] == m.L1_r[NF+1,c]*m.x1_r[NF+1,1,c]-\
        m.L1_r[NF,c]*m.x1_r[NF,1,c] + \
        m.V1[NF-1,0]*m.y1_r[NF-1,1,c]- m.V1[NF,0]*m.y1_r[NF,1,c]+\
        m.F_r*m.zF_r[1] 
m.const16_r = Constraint(m.cp,rule=const16_r_rule)

def const17_rule(m,f,c):
    return m.Mx1dot[NF,2,f,c] == m.L1[NF+1,f,c]*m.x1[NF+1,2,f,c]-\
        m.L1[NF,f,c]*m.x1[NF,2,f,c] + \
        m.V1[NF-1,f]*m.y1[NF-1,2,f,c]- m.V1[NF,f]*m.y1[NF,2,f,c]+\
        m.F[f]*m.zF[f,2] 
m.const17 = Constraint(m.fe,m.cp,rule=const17_rule) 

def const17_r_rule(m,c):
    return m.Mx1dot_r[NF,2,c] == m.L1_r[NF+1,c]*m.x1_r[NF+1,2,c]-\
        m.L1_r[NF,c]*m.x1_r[NF,2,c] + \
        m.V1[NF-1,0]*m.y1_r[NF-1,2,c]- m.V1[NF,0]*m.y1_r[NF,2,c]+\
        m.F_r*m.zF_r[2] 
m.const17_r = Constraint(m.cp,rule=const17_r_rule) 

### Reboiler, assumed to be an equilibrium stage 

def const18_rule(m,f,c):
    return m.M1dot[1,f,c] == m.L1[2,f,c] - m.V1[1,f] - m.B1[f] 
m.const18 = Constraint(m.fe,m.cp,rule=const18_rule)

def const18_r_rule(m,c):
    return m.M1dot_r[1,c] == m.L1_r[2,c] - m.V1[1,0] - m.B1[0] 
m.const18_r = Constraint(m.cp,rule=const18_r_rule)

def const19_rule(m,j,f,c):
    return m.Mx1dot[1,j,f,c] == m.L1[2,f,c]*m.x1[2,j,f,c] - \
        m.V1[1,f]*m.y1[1,j,f,c] - m.B1[f]*m.x1[1,j,f,c]
m.const19 = Constraint(m.set_1_2,m.fe,m.cp,rule=const19_rule)

def const19_r_rule(m,j,c):
    return m.Mx1dot_r[1,j,c] == m.L1_r[2,c]*m.x1_r[2,j,c] - \
        m.V1[1,0]*m.y1_r[1,j,c] - m.B1[0]*m.x1_r[1,j,c]
m.const19_r = Constraint(m.set_1_2,m.cp,rule=const19_r_rule)

### Total Condenser (not equilibrium)

def const20_rule(m,f,c):
    return m.M1dot[NT,f,c] == m.V1[NT-1,f] - m.LT1[f] - m.D1[f] 
m.const20 = Constraint(m.fe,m.cp,rule=const20_rule)

def const20_r_rule(m,c):
    return m.M1dot_r[NT,c] == m.V1[NT-1,0] - m.LT1[0] - m.D1[0] 
m.const20_r = Constraint(m.cp,rule=const20_r_rule)

def const21_rule(m,j,f,c):
    return m.Mx1dot[NT,j,f,c] == m.V1[NT-1,f]*m.y1[NT-1,j,f,c] -\
        m.L1[NT,f,c]*m.x1[NT,j,f,c] - m.D1[f]*m.x1[NT,j,f,c] 
m.const21 = Constraint(m.set_1_2,m.fe,m.cp,rule=const21_rule) 

def const21_r_rule(m,j,c):
    return m.Mx1dot_r[NT,j,c] == m.V1[NT-1,0]*m.y1_r[NT-1,j,c] -\
        m.L1_r[NT,c]*m.x1_r[NT,j,c] - m.D1[0]*m.x1_r[NT,j,c] 
m.const21_r = Constraint(m.set_1_2,m.cp,rule=const21_r_rule) 

m.x1dot   = Var(m.set_1_NT,m.set_1_2,m.fe,m.cp)
m.x1dot_r = Var(m.set_1_NT,m.set_1_2,m.cp,initialize=0)

def const21_2_rule(m,i,j,f,c):
    return m.x1dot[i,j,f,c]*m.M1[i,f,c] == (m.Mx1dot[i,j,f,c] - \
        m.x1[i,j,f,c]*m.M1dot[i,f,c])
m.const21_2 = Constraint(m.set_1_NT,m.set_1_2,m.fe,m.cp,rule=const21_2_rule)

def const21_2_r_rule(m,i,j,c):
    return m.x1dot_r[i,j,c]*m.M1_r[i,c] == (m.Mx1dot_r[i,j,c] - \
        m.x1_r[i,j,c]*m.M1dot_r[i,c])
m.const21_2_rule = Constraint(m.set_1_NT,m.set_1_2,m.cp,rule=const21_2_r_rule)

m.x1set = Param(m.set_1_NT,m.set_1_2,mutable=True,
        initialize={  (1,1): 1.456723e-02 ,  (1,2): 3.356477e-01,
                      (2,1): 2.334014e-02 ,  (2,2): 4.140879e-01,            
                      (3,1): 3.492060e-02 ,  (3,2): 4.827847e-01,
                      (4,1): 4.953352e-02 ,  (4,2): 5.371535e-01,
                      (5,1): 6.733121e-02 ,  (5,2): 5.752526e-01,
                      (6,1): 8.843107e-02 ,  (6,2): 5.974064e-01,
                      (7,1): 1.129221e-01 ,  (7,2): 6.053188e-01,
                      (8,1): 1.408338e-01 ,  (8,2): 6.012414e-01,  
                      (9,1): 1.720801e-01 ,  (9,2): 5.874564e-01,
                     (10,1): 2.063996e-01 , (10,2): 5.660612e-01,
                     (11,1): 2.433133e-01 , (11,2): 5.389396e-01,
                     (12,1): 2.821149e-01 , (12,2): 5.078040e-01,
                     (13,1): 3.219060e-01 , (13,2): 4.742344e-01,
                     (14,1): 3.616718e-01 , (14,2): 4.396837e-01,
                     (15,1): 4.003843e-01 , (15,2): 4.054461e-01,
                     (16,1): 4.371110e-01 , (16,2): 3.726090e-01,
                     (17,1): 4.711024e-01 , (17,2): 3.420097e-01,
                     (18,1): 5.018445e-01 , (18,2): 3.142148e-01,
                    (19,1): 5.290693e-01 , (19,2): 2.895293e-01,
                     (20,1): 5.527306e-01 , (20,2): 2.680316e-01,
                     (21,1): 5.729582e-01 , (21,2): 2.496242e-01,
                     (22,1): 6.411449e-01 , (22,2): 2.432636e-01,
                     (23,1): 6.992029e-01 , (23,2): 2.282707e-01,
                     (24,1): 7.476111e-01 , (24,2): 2.081557e-01,
                     (25,1): 7.877911e-01 , (25,2): 1.857922e-01,
                     (26,1): 8.212958e-01 , (26,2): 1.631723e-01,
                     (27,1): 8.494521e-01 , (27,2): 1.415232e-01,
                     (28,1): 8.732853e-01 , (28,2): 1.215188e-01,
                     (29,1): 8.935608e-01 , (29,2): 1.034695e-01,
                     (30,1): 9.108532e-01 , (30,2): 8.745958e-02,
                     (31,1): 9.256075e-01 , (31,2): 7.343858e-02,
                     (32,1): 9.381826e-01 , (32,2): 6.128041e-02,
                     (33,1): 9.488784e-01 , (33,2): 5.082046e-02,
                     (34,1): 9.579526e-01 , (34,2): 4.187905e-02,
                     (35,1): 9.656303e-01 , (35,2): 3.427594e-02,
                     (36,1): 9.721090e-01 , (36,2): 2.783900e-02,
                     (37,1): 9.775622e-01 , (37,2): 2.240916e-02,
                     (38,1): 9.821416e-01 , (38,2): 1.784268e-02,
                     (39,1): 9.859795e-01 , (39,2): 1.401198e-02,
                     (40,1): 9.891903e-01 , (40,2): 1.080523e-02,
                     (41,1): 9.918723e-01 , (41,2): 8.125505e-03 })
m.M1set = Param(m.set_1_NT,mutable=True,
        initialize={  (1): 5.353307e-01 ,
                      (2): 6.192504e-01 ,            
                      (3): 6.192471e-01 ,
                      (4): 6.192441e-01 ,
                      (5): 6.192414e-01 ,
                      (6): 6.192387e-01 ,
                      (7): 6.192361e-01 ,
                      (8): 6.192332e-01 ,  
                      (9): 6.192299e-01 ,
                     (10): 6.192260e-01 ,
                     (11): 6.192212e-01 ,
                     (12): 6.192154e-01 ,
                     (13): 6.192084e-01 ,
                     (14): 6.192000e-01 ,
                     (15): 6.191902e-01 ,
                     (16): 6.191789e-01 ,
                     (17): 6.191664e-01 ,
                     (18): 6.191527e-01 ,
                     (19): 6.191383e-01 ,
                     (20): 6.191234e-01 ,
                     (21): 6.191085e-01 ,
                     (22): 6.383035e-01 ,
                     (23): 6.382791e-01 ,
                     (24): 6.382574e-01 ,
                     (25): 6.382392e-01 ,
                     (26): 6.382248e-01 ,
                     (27): 6.382141e-01 ,
                     (28): 6.382067e-01 ,
                     (29): 6.382020e-01 ,
                     (30): 6.381991e-01 ,
                     (31): 6.381976e-01 ,
                     (32): 6.381969e-01 ,
                     (33): 6.381965e-01 ,
                     (34): 6.381964e-01 ,
                     (35): 6.381963e-01 ,
                     (36): 6.381963e-01 ,
                     (37): 6.381963e-01 ,
                     (38): 6.381963e-01 ,
                     (39): 6.381963e-01 ,
                     (40): 6.381963e-01 ,
                     (41): 5.063407e-01  })
    
# what follows are a bunch of constraints defining initial conditions...
# not sure what I should do with these at this point? 
# ... try to define them? leave them for another file... 

def x1_init_constr_rule(m,i,j):
    return m.x1_0[i,j,0] == m.x1set[i,j] 
m.x1_init_constr = Constraint(m.set_1_NT,m.set_1_2,rule=x1_init_constr_rule)

def x1_constr_rule(m,i,j,f):
    return m.x1_0[i,j,f] == m.x1[i,j,f-1,m.ncp] 
m.x1_constr = Constraint(m.set_1_NT,m.set_1_2,m.set_1_nfe,rule=x1_constr_rule)

def x1_Lag_rule(m,i,j,q,c):
    return m.x1[i,j,q,c] == m.x1_0[i,j,q] + m.h[q]*sum(m.omega[k,c]*m.x1dot[i,j,q,k] for k in m.cp)
m.x1_Lag = Constraint(m.set_1_NT,m.set_1_2,m.fe,m.cp,rule=x1_Lag_rule)

def x1_r_Lag_rule(m,i,j,c):
    return m.x1_r[i,j,c] == m.x1_0[i,j,0] + m.h[0]*sum(m.omega[k,c]*m.x1dot_r[i,j,k] for k in m.cp)
m.x1_r_Lag = Constraint(m.set_1_NT,m.set_1_2,m.cp,rule=x1_r_Lag_rule)

# the following impose constant liquid overflow? 
# No, impose continuity between finite elements
# is constant vapor overflow implied by constant 
# vapor holdup? 
def L1_const_rule(m,i,f):
    return m.L1_0[i,f] == m.L1[i,f-1,m.ncp]
m.L1_const = Constraint(m.set_2_NT,m.set_1_nfe,rule=L1_const_rule)

def L1_const2_rule(m,i):
    return m.L1_0[i,0] == m.Kbf*( (m.M1_0[i,0] - m.Muw+sqrt((m.M1_0[i,0] - m.Muw)**2+10**(-8)) )/2)**1.5
m.L1_const2 = Constraint(m.set_2_NF,rule=L1_const2_rule) 

def L1_const3_rule(m,i):
    return m.L1_0[i,0] == m.Kuf*( (m.M1_0[i,0] - m.Muw+sqrt((m.M1_0[i,0] - m.Muw)**2+10**(-8)) )/2)**1.5
m.L1_const3 = Constraint(m.set_NFp1_NTm1,rule=L1_const3_rule)

def M1_init_constr_rule(m,i):
    return m.M1_0[i,0] == m.M1set[i] 
m.M1_init_constr = Constraint(m.set_1_NT,rule=M1_init_constr_rule)

def M1_constr_rule(m,i,f):
    return m.M1_0[i,f] == m.M1[i,f-1,m.ncp]
m.M1_constr = Constraint(m.set_1_NT,m.set_1_nfe,rule=M1_constr_rule)

def M1_Lag_rule(m,i,q,c):
    return m.M1[i,q,c] == m.M1_0[i,q] + m.h[q]*sum(m.omega[k,c]*m.M1dot[i,q,k] for k in m.cp)
m.M1_Lag = Constraint(m.set_1_NT,m.fe,m.cp,rule=M1_Lag_rule)

def M1_r_Lag_rule(m,i,c):
    return m.M1_r[i,c] == m.M1_0[i,0] + m.h[0]*sum(m.omega[k,c]*m.M1dot_r[i,k] for k in m.cp)
m.M1_r_Lag = Constraint(m.set_1_NT,m.cp,rule=M1_r_Lag_rule) 

####################################
### Model Constraints 2 ############
####################################

### VLE equation split

def const22_rule(m,i,j,f,c):
    return m.y_2_1[i,j,f,c] == m.x2[i,j,f,c]*m.alpha_m[j,j]
m.const22 = Constraint(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,rule=const22_rule)

def const22_r_rule(m,i,j,c):
    return m.y_2_1_r[i,j,c] == m.x2_r[i,j,c]*m.alpha_m[j,j]
m.const22_r = Constraint(m.set_1_NTm1,m.set_1_2,m.cp,rule=const22_r_rule)

def const23_rule(m,i,j,f,c):
    return m.y_2_2[i,j,f,c] == ((m.x2[i,1,f,c]*(m.alpha[1]-1)+m.x2[i,2,f,c]*(m.alpha[2]-1))+1)
m.const23 = Constraint(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,rule=const23_rule)

def const23_r_rule(m,i,j,c):
    return m.y_2_2_r[i,j,c] == ((m.x2_r[i,1,c]*(m.alpha[1]-1)+m.x2_r[i,2,c]*(m.alpha[2]-1))+1)
m.const23_r = Constraint(m.set_1_NTm1,m.set_1_2,m.cp,rule=const2_r_rule)

# Vapor-liquid equilibria (multicomponent ideal VLE
# Stichlmair-Fair, 'Distillation', p.36, 1998)

def const24_rule(m,i,j,f,c):
    return m.y2[i,j,f,c]*m.y_2_2[i,j,f,c] == m.y_2_1[i,j,f,c]
m.const24 = Constraint(m.set_1_NTm1,m.set_1_2,m.fe,m.cp,rule=const24_rule)

def const24_r_rule(m,i,j,c):
    return m.y2_r[i,j,c]*m.y_2_2_r[i,j,c] == m.y_2_1_r[i,j,c]
m.const24_r = Constraint(m.set_1_NTm1,m.set_1_2,m.cp,rule=const24_r_rule)

### Vapor flows assuming constant molar flows ###

def const25_rule(m,i,f):
    return m.V2[i,f] == m.VB2[f]                            # vapor flow below feed
m.const25 = Constraint(m.set_1_NFm1,m.fe,rule=const25_rule)

def const26_rule(m,i,f):
    return m.V2[i,f] == m.VB2[f]                            # vapor flow above feed 
m.const26 = Constraint(m.set_NF_NTm1,m.fe,rule=const26_rule) 

### Liquid flows given by Franci's weir formula: L(i)=K*Mow(i)^1.5
### Liquid flow L(i) only depends on the holdup over the weir Mow(i)
### M(i) = Mow(i) + Muw(i) (Total holdup = holdup over weir + holdup below weir)

def const27_rule(m,i,f,c):
    return m.L2[i,f,c] == m.Kbf*( (m.M2[i,f,c] - m.Muw + sqrt( (m.M2[i,f,c] - m.Muw)**2 + 10**(-8)))/2 )**1.5 # liquid flow below feed
m.const27 = Constraint(m.set_2_NF,m.fe,m.cp,rule=const27_rule)

def const27_r_rule(m,i,c):
    return m.L2_r[i,c] == m.Kbf*( (m.M2_r[i,c] - m.Muw + sqrt( (m.M2_r[i,c] - m.Muw)**2 + 10**(-8)))/2 )**1.5 # liquid flow below feed (real)
m.const27_r = Constraint(m.set_2_NF,m.cp,rule=const27_r_rule)

def const28_rule(m,i,f,c):
    return m.L2[i,f,c] == m.Kuf*( (m.M2[i,f,c] - m.Muw + sqrt( (m.M2[i,f,c] - m.Muw)**2 + 10**(-8)))/2 )**1.5 # liquid flows above feed 
m.const28 = Constraint(m.set_NFp1_NTm1,m.fe,m.cp,rule=const28_rule)

def const28_r_rule(m,i,c):
    return m.L2_r[i,c] == m.Kuf*( (m.M2_r[i,c] - m.Muw + sqrt( (m.M2_r[i,c] - m.Muw)**2 + 10**(-8)))/2 )**1.5 # liquid flows above feed 
m.const28_r = Constraint(m.set_NFp1_NTm1,m.cp,rule=const28_r_rule)

def const29_rule(m,f,c):
    return m.L2[NT,f,c] == m.LT2[f]  # condenser's liquid flow
m.const29 = Constraint(m.fe,m.cp,rule=const29_rule)

def const29_r_rule(m,c):
    return m.L2_r[NT,c] == m.LT2[0]  # condneser's liquid flow
m.const29_r = Constraint(m.cp,rule=const29_r_rule)

### Material balances for total holdup and component holdup ###
m.M2dot = Var(m.set_1_NT,m.fe,m.cp)
def const32_rule(m,i,f,c):
    return m.M2dot[i,f,c] == m.L2[i+1,f,c] - m.L2[i,f,c] + m.V2[i-1,f] - m.V2[i,f] # dM below feed
m.const32 = Constraint(m.set_2_NFm1,m.fe,m.cp,rule=const32_rule)

m.M2dot_r = Var(m.set_1_NT,m.cp,initialize=0)
def const32_r_rule(m,i,c):
    return m.M2dot_r[i,c] == m.L2_r[i+1,c] - m.L2_r[i,c] + m.V2[i-1,0] - m.V2[i,0] # dM below feed
m.const32_r = Constraint(m.set_2_NFm1,m.cp,rule=const32_r_rule)

def const33_rule(m,i,f,c):
    return m.M2dot[i,f,c] == m.L2[i+1,f,c] - m.L2[i,f,c] + m.V2[i-1,f] - m.V2[i,f] # dM above feed
m.const33 = Constraint(m.set_NFp1_NTm1,m.fe,m.cp,rule=const33_rule)

def const33_r_rule(m,i,c):
    return m.M2dot_r[i,c] == m.L2_r[i+1,c] - m.L2_r[i,c] + m.V2[i-1,0] - m.V2[i,0] # dM above feed
m.const33_r = Constraint(m.set_NFp1_NTm1,m.cp,rule=const33_r_rule)

m.Mx2dot = Var(m.set_1_NT,m.set_1_2,m.fe,m.cp)
def const34_rule(m,i,j,f,c):
    return m.Mx2dot[i,j,f,c] == m.L2[i+1,f,c]*m.x2[i+1,j,f,c] - \
        m.L2[i,f,c]*m.x2[i,j,f,c] + m.V2[i-1,f]*m.y2[i-1,j,f,c]- \
        m.V2[i,f]*m.y2[i,j,f,c] 
m.const34 = Constraint(m.set_2_NFm1,m.set_1_2,m.fe,m.cp,rule=const34_rule)

m.Mx2dot_r = Var(m.set_1_NT,m.set_1_2,m.cp,initialize=0)
def const34_r_rule(m,i,j,c):
    return m.Mx2dot_r[i,j,c] == m.L2_r[i+1,c]*m.x2_r[i+1,j,c] - \
        m.L2_r[i,c]*m.x2_r[i,j,c] + m.V2[i-1,0]*m.y2_r[i-1,j,c]- \
        m.V2[i,0]*m.y2_r[i,j,c] 
m.const34_r = Constraint(m.set_2_NFm1,m.set_1_2,m.cp,rule=const34_r_rule)

def const35_rule(m,i,j,f,c):
    return m.Mx2dot[i,j,f,c] == m.L2[i+1,f,c]*m.x2[i+1,j,f,c] - \
        m.L2[i,f,c]*m.x2[i,j,f,c] + m.V2[i-1,f]*m.y2[i-1,j,f,c]- \
        m.V2[i,f]*m.y2[i,j,f,c] 
m.const35 = Constraint(m.set_NFp1_NTm1,m.set_1_2,m.fe,m.cp,rule=const35_rule)

def const35_r_rule(m,i,j,c):
    return m.Mx2dot_r[i,j,c] == m.L2_r[i+1,c]*m.x2_r[i+1,j,c] - \
        m.L2_r[i,c]*m.x2_r[i,j,c] + m.V2[i-1,0]*m.y2_r[i-1,j,c] -\
        m.V2[i,0]*m.y2_r[i,j,c] 
m.const35_r = Constraint(m.set_NFp1_NTm1,m.set_1_2,m.cp,rule=const35_r_rule)

### Correction at feed stage. Feed assumed to be (well?) mixed into feed stage.

def const36_rule(m,f,c):
    return m.M2dot[NF,f,c] == m.L2[NF+1,f,c] - m.L2[NF,f,c] + m.V2[NF-1,f] - m.V2[NF,f] + m.B1[f]
m.const36 = Constraint(m.fe,m.cp,rule=const36_rule)

def const36_r_rule(m,c):
    return m.M2dot_r[NF,c] == m.L2_r[NF+1,c] - m.L2_r[NF,c] + m.V2[NF-1,0] - m.V2[NF,0] + m.B1[0] 
m.const36_r = Constraint(m.cp,rule=const36_r_rule)

def const37_rule(m,f,j,c):
    return m.Mx2dot[NF,j,f,c] == m.L2[NF+1,f,c]*m.x2[NF+1,j,f,c]-\
        m.L2[NF,f,c]*m.x2[NF,j,f,c] + \
        m.V2[NF-1,f]*m.y2[NF-1,j,f,c]- m.V2[NF,f]*m.y2[NF,j,f,c]+\
        m.B1[f]*m.x1[1,j,f,c]  
m.const37 = Constraint(m.fe,m.set_1_2,m.cp,rule=const37_rule)

def const37_r_rule(m,j,c):
    return m.Mx2dot_r[NF,j,c] == m.L2_r[NF+1,c]*m.x2_r[NF+1,j,c]-\
        m.L2_r[NF,c]*m.x2_r[NF,j,c] + \
        m.V2[NF-1,0]*m.y2_r[NF-1,j,c]- m.V2[NF,0]*m.y2_r[NF,j,c]+\
        m.B1[0]*m.x1_r[1,j,c] 
m.const37_r = Constraint(m.set_1_2,m.cp,rule=const37_r_rule)

### Reboiler, assumed to be an equilibrium stage 

def const39_rule(m,f,c):
    return m.M2dot[1,f,c] == m.L2[2,f,c] - m.V2[1,f] - m.B2[f] 
m.const39 = Constraint(m.fe,m.cp,rule=const39_rule)

def const39_r_rule(m,c):
    return m.M2dot_r[1,c] == m.L2_r[2,c] - m.V2[1,0] - m.B2[0] 
m.const39_r = Constraint(m.cp,rule=const39_r_rule)

def const40_rule(m,j,f,c):
    return m.Mx2dot[1,j,f,c] == m.L2[2,f,c]*m.x2[2,j,f,c] - m.V2[1,f]*m.y2[1,j,f,c] - m.B2[f]*m.x2[1,j,f,c]
m.const40 = Constraint(m.set_1_2,m.fe,m.cp,rule=const40_rule)

def const40_r_rule(m,j,c):
    return m.Mx2dot_r[1,j,c] == m.L2_r[2,c]*m.x2_r[2,j,c] - m.V2[1,0]*m.y2_r[1,j,c] - m.B2[0]*m.x2_r[1,j,c]
m.const40_r = Constraint(m.set_1_2,m.cp,rule=const40_r_rule)

### Total Condenser (not equilibrium)

def const41_rule(m,f,c):
    return m.M2dot[NT,f,c] == m.V2[NT-1,f] - m.LT2[f] - m.D2[f] 
m.const41 = Constraint(m.fe,m.cp,rule=const41_rule)

def const41_r_rule(m,c):
    return m.M2dot_r[NT,c] == m.V2[NT-1,0] - m.LT2[0] - m.D2[0] 
m.const41_r = Constraint(m.cp,rule=const41_r_rule)

def const42_rule(m,j,f,c):
    return m.Mx2dot[NT,j,f,c] == m.V2[NT-1,f]*m.y2[NT-1,j,f,c] - m.L2[NT,f,c]*m.x2[NT,j,f,c] - m.D2[f]*m.x2[NT,j,f,c] 
m.const42 = Constraint(m.set_1_2,m.fe,m.cp,rule=const21_rule) 

def const42_r_rule(m,j,c):
    return m.Mx2dot_r[NT,j,c] == m.V2[NT-1,0]*m.y2_r[NT-1,j,c] - m.L2_r[NT,c]*m.x2_r[NT,j,c] - m.D2[0]*m.x2_r[NT,j,c] 
m.const42_r = Constraint(m.set_1_2,m.cp,rule=const42_r_rule) 

m.x2dot   = Var(m.set_1_NT,m.set_1_2,m.fe,m.cp)
m.x2dot_r = Var(m.set_1_NT,m.set_1_2,m.cp,initialize=0)

def const42_2_rule(m,i,j,f,c):
    return m.x2dot[i,j,f,c]*m.M2[i,f,c] == (m.Mx2dot[i,j,f,c] - m.x2[i,j,f,c]*m.M2dot[i,f,c])
m.const42_2 = Constraint(m.set_1_NT,m.set_1_2,m.fe,m.cp,rule=const42_2_rule)

def const42_2_r_rule(m,i,j,c):
    return m.x2dot_r[i,j,c]*m.M2_r[i,c] == (m.Mx2dot_r[i,j,c] - m.x2_r[i,j,c]*m.M2dot_r[i,c])
m.const42_2_rule = Constraint(m.set_1_NT,m.set_1_2,m.cp,rule=const42_2_r_rule)

# here lies a variable/expression definition for x2dot which is commented out

m.x2set = Param(m.set_1_NT,m.set_1_2,mutable=True,
        initialize={  (1,1): 3.060162e-07 ,  (1,2): 1.676853e-02,
                      (2,1): 5.386158e-07 ,  (2,2): 2.439720e-02,            
                      (3,1): 1.099705e-06 ,  (3,2): 3.485435e-02,
                      (4,1): 1.897220e-06 ,  (4,2): 4.906097e-02,
                      (5,1): 3.660244e-06 ,  (5,2): 6.812878e-02,
                      (6,1): 6.378533e-06 ,  (6,2): 9.330903e-02,
                      (7,1): 1.164810e-05 ,  (7,2): 1.258571e-01,
                      (8,1): 2.015279e-05 ,  (8,2): 1.667846e-01,  
                      (9,1): 3.495949e-05 ,  (9,2): 2.164997e-01,
                     (10,1): 5.854720e-05 , (10,2): 2.744140e-01,
                     (11,1): 9.614919e-05 , (11,2): 3.386772e-01,
                     (12,1): 1.530529e-04 , (12,2): 4.062458e-01,
                     (13,1): 2.371195e-04 , (13,2): 4.733765e-01,
                     (14,1): 3.570991e-04 , (14,2): 5.364110e-01,
                     (15,1): 5.245133e-04 , (15,2): 5.925220e-01,
                     (16,1): 7.535377e-04 , (16,2): 6.401219e-01,
                     (17,1): 1.062948e-03 , (17,2): 6.788453e-01,
                     (18,1): 1.477456e-03 , (18,2): 7.092396e-01,
                     (19,1): 2.030211e-03 , (19,2): 7.323650e-01,
                     (20,1): 2.765530e-03 , (20,2): 7.494520e-01,
                     (21,1): 3.742716e-03 , (21,2): 7.616753e-01,
                     (22,1): 3.948365e-03 , (22,2): 8.198509e-01,
                     (23,1): 4.130053e-03 , (23,2): 8.662810e-01,
                     (24,1): 4.294090e-03 , (24,2): 9.019588e-01,
                     (25,1): 4.450267e-03 , (25,2): 9.285751e-01,
                     (26,1): 4.610807e-03 , (26,2): 9.479829e-01,
                     (27,1): 4.790144e-03 , (27,2): 9.618807e-01,
                     (28,1): 5.005521e-03 , (28,2): 9.716767e-01,
                     (29,1): 5.278293e-03 , (29,2): 9.784661e-01,
                     (30,1): 5.635913e-03 , (30,2): 9.830615e-01,
                     (31,1): 6.114694e-03 , (31,2): 9.860424e-01,
                     (32,1): 6.763525e-03 , (32,2): 9.878034e-01,
                     (33,1): 7.648893e-03 , (33,2): 9.885932e-01,
                     (34,1): 8.861629e-03 , (34,2): 9.885434e-01,
                     (35,1): 1.052597e-02 , (35,2): 9.876855e-01,
                     (36,1): 1.281165e-02 , (36,2): 9.859588e-01,
                     (37,1): 1.594986e-02 , (37,2): 9.832078e-01,
                     (38,1): 2.025392e-02 , (38,2): 9.791718e-01,
                     (39,1): 2.614528e-02 , (39,2): 9.734661e-01,
                     (40,1): 3.418488e-02 , (40,2): 9.655549e-01,
                     (41,1): 4.510831e-02 , (41,2): 9.547203e-01 })
m.M2set = Param(m.set_1_NT,mutable=True,
        initialize={  (1): 5.047356e-01 ,
                      (2): 6.783372e-01 ,            
                      (3): 6.783304e-01 ,
                      (4): 6.783225e-01 ,
                      (5): 6.783130e-01 ,
                      (6): 6.783014e-01 ,
                      (7): 6.782871e-01 ,
                      (8): 6.782696e-01 ,  
                      (9): 6.782484e-01 ,
                     (10): 6.782231e-01 ,
                     (11): 6.781934e-01 ,
                     (12): 6.781592e-01 ,
                     (13): 6.781206e-01 ,
                     (14): 6.780781e-01 ,
                     (15): 6.780325e-01 ,
                     (16): 6.779846e-01 ,
                     (17): 6.779356e-01 ,
                     (18): 6.778867e-01 ,
                     (19): 6.778394e-01 ,
                     (20): 6.777946e-01 ,
                     (21): 6.777535e-01 ,
                     (22): 7.406434e-01 ,
                     (23): 7.405974e-01 ,
                     (24): 7.405610e-01 ,
                     (25): 7.405337e-01 ,
                     (26): 7.405146e-01 ,
                     (27): 7.405020e-01 ,
                     (28): 7.404942e-01 ,
                     (29): 7.404898e-01 ,
                     (30): 7.404874e-01 ,
                     (31): 7.404863e-01 ,
                     (32): 7.404858e-01 ,
                     (33): 7.404856e-01 ,
                     (34): 7.404855e-01 ,
                     (35): 7.404855e-01 ,
                     (36): 7.404855e-01 ,
                     (37): 7.404855e-01 ,
                     (38): 7.404855e-01 ,
                     (39): 7.404855e-01 ,
                     (40): 7.404855e-01 ,
                     (41): 4.828224e-01  })

def x2_init_constr_rule(m,i,j):
    return m.x2_0[i,j,0] == m.x2set[i,j] 
m.x2_init_constr = Constraint(m.set_1_NT,m.set_1_2,rule=x2_init_constr_rule)

def x2_constr_rule(m,i,j,f):
    return m.x2_0[i,j,f] == m.x2[i,j,f-1,m.ncp] 
m.x2_constr = Constraint(m.set_1_NT,m.set_1_2,m.set_1_nfe,rule=x2_constr_rule)

def x2_Lag_rule(m,i,j,q,c):
    return m.x2[i,j,q,c] == m.x2_0[i,j,q] + m.h[q]*sum(m.omega[k,c]*m.x2dot[i,j,q,k] for k in m.cp)
m.x2_Lag = Constraint(m.set_1_NT,m.set_1_2,m.fe,m.cp,rule=x2_Lag_rule)

def x2_r_Lag_rule(m,i,j,c):
    return m.x2_r[i,j,c] == m.x2_0[i,j,0] + m.h[0]*sum(m.omega[k,c]*m.x2dot_r[i,j,k] for k in m.cp)
m.x2_r_Lag = Constraint(m.set_1_NT,m.set_1_2,m.cp,rule=x2_r_Lag_rule)

def L2_const_rule(m,i,f):
    return m.L2_0[i,f] == m.L2[i,f-1,m.ncp]
m.L2_const = Constraint(m.set_2_NT,m.set_1_nfe,rule=L2_const_rule)

def L2_const2_rule(m,i):
    return m.L2_0[i,0] == m.Kbf*( (m.M2_0[i,0] - m.Muw+sqrt((m.M2_0[i,0] - m.Muw)**2+10**(-8)) )/2)**1.5
m.L2_const2 = Constraint(m.set_2_NF,rule=L2_const2_rule) 

def L2_const3_rule(m,i):
    return m.L2_0[i,0] == m.Kuf*( (m.M2_0[i,0] - m.Muw+sqrt((m.M2_0[i,0] - m.Muw)**2+10**(-8)) )/2)**1.5
m.L2_const3 = Constraint(m.set_NFp1_NTm1,rule=L2_const3_rule)

def M2_init_constr_rule(m,i):
    return m.M2_0[i,0] == m.M2set[i] 
m.M2_init_constr = Constraint(m.set_1_NT,rule=M2_init_constr_rule)

def M2_constr_rule(m,i,f):
    return m.M2_0[i,f] == m.M2[i,f-1,m.ncp]
m.M2_constr = Constraint(m.set_1_NT,m.set_1_nfe,rule=M2_constr_rule)

def M2_Lag_rule(m,i,q,c):
    return m.M2[i,q,c] == m.M2_0[i,q] + m.h[q]*sum(m.omega[k,c]*m.M2dot[i,q,k] for k in m.cp)
m.M2_Lag = Constraint(m.set_1_NT,m.fe,m.cp,rule=M2_Lag_rule)

def M2_r_Lag_rule(m,i,c):
    return m.M2_r[i,c] == m.M2_0[i,0] + m.h[0]*sum(m.omega[k,c]*m.M2dot_r[i,k] for k in m.cp)
m.M2_r_Lag = Constraint(m.set_1_NT,m.cp,rule=M2_r_Lag_rule) 

# Constraints not in original model: 

def const43_rule(m,i,f):
    return m.TC1[i,f] == m.x1_0[i,1,f]*353.3 + m.x1_0[i,2,f]*383.8 + (1-m.x1_0[i,1,f]-m.x1_0[i,2,f])*411.5
m.const43 = Constraint(m.set_1_NT,m.fep,rule=const43_rule)

def const44_rule(m,i,f):
    return m.TC2[i,f] == m.x2_0[i,1,f]*353.3 + m.x2_0[i,2,f]*383.8 + (1-m.x2_0[i,1,f]-m.x2_0[i,2,f])*411.5 #m.x1[1,4,1]*353.3+m.x1[14,2]*383.8 + (1-m.x1[14,2])*411.5 == 382.9450 ???
m.const44 = Constraint(m.set_1_NT,m.fep,rule=const44_rule)

###

# <insert max boilup constraints here> 

############################
### Terminal Constraints ### 
############################

# def termcon_x1_rule(m,i,j):
#     return m.x1_0[i,j,m.nfe] == m.x1ref[i,j]
# m.termcon_x1 = Constraint(m.set_1_NT,m.set_1_2,rule=termcon_x1_rule) 
# 
# def termcon_x2_rule(m,i,j):
#     return m.x2_0[i,j,m.nfe] == m.x2ref[i,j] 
# m.termcon_x2 = Constraint(m.set_1_NT,m.set_1_2,rule=termcon_x2_rule)
# 
# def termcon_m1_rule(m,i):
#     return m.M1_0[i,m.nfe] == m.M1ref[i] 
# m.termcon_m1 = Constraint(m.set_1_NT,rule=termcon_m1_rule)
# 
# def termcon_m2_rule(m,i):
#     return m.M2_0[i,m.nfe] == m.M2ref[i] 
# m.termcon_m2 = Constraint(m.set_1_NT,rule=termcon_m2_rule) 

def termcon_rule(m):
    return sum( sum( ((m.x1_0[i,j,m.nfe]-m.x1ref[i,j])**2 + \
        (m.x2_0[i,j,m.nfe] - m.x2ref[i,j])**2 ) \
        for j in m.set_1_2) \
        for i in m.set_1_NT) + \
        sum( (m.M1_0[i,m.nfe] - m.M1ref[i])**2 + \
        (m.M2_0[i,m.nfe]-m.M2ref[i])**2 \
        for i in m.set_1_NT) <= m.termeps 
m.termcon = Constraint(rule=termcon_rule)

##########################
### Descent Constraint ###
##########################

# 2 norm 
# def descent_con1_rule(m):
#     return m.lk == (m.D1[0]-m.D1ref)**2 + m.D2[0]-m.D2ref)**2 + (m.B1[0] - m.B1ref)**2 + (m.B2[0]-m.B1ref)**2 + (m.VB1[0]-m.VB1ref)**2 + (m.VB2[0]-m.VB2ref)**2 + (m.LT1[0]-m.LT1ref)**2 + m.LT2[0]-m.LT2ref)**2 + sum( (m.M1_0[i,0]-m.M1ref[i])**2 + (m.M2_0[i,0]-m.M2ref[i])**2 + sum( (m.x1_0[i,j,0]-m.x1ref[i,j])**2 + (m.x2_0[i,j,0]-m.x2ref[i,j])**2 for j in m.set_1_2) for m.set_1_NT) 
# m.descent_con1 = Constraint(rule=descent_con1_rule)

# def descent_con2_rule(m):
#     return m.vk == sum( (m.D1[f]-m.D1ref)**2 + (m.D2[f]-m.D2ref)**2 + (m.B1[f]-m.B1ref)**2 + (m.B2[f] - m.B2ref)**2 + (m.VB1[f]-m.VB1ref[i])**2 + (m.VB2[f]-m.VB2ref)**2 + (m.LT1[f]-m.LT1ref)**2 + (m.LT2[f]-m.LT2ref)**2 + sum( (m.M1_0[i,f]-m.M1ref[i])**2 + (m.M2_0[i,f]-m.M2ref[i])**2 + sum( (m.x1_0[i,j,f]-m.x1[i,j])**2 + (m.x2_0[i,j,f]-m.x2ref[i,j])**2 for j in m.set_1_2) for i in m.set_1_NT) for f in m.fe) 
# m.descnet_con2 = Constraint(rule=descent_con2_rule)

# 1 norm
def descent_con1_rule(m):
    return m.lk == sqrt((m.D1[0]-m.D1ref)**2+m.smt**2) - m.smt + sqrt((m.D2[0]-m.D2ref)**2 + m.smt**2) - m.smt + sqrt((m.B1[0]-m.B1ref)**2 + m.smt**2) - m.smt + sqrt((m.B2[0]-m.B1ref)**2+m.smt**2) - m.smt + sqrt((m.VB1[0]-m.VB1ref)**2 + m.smt**2) - m.smt + sqrt((m.VB2[0]-m.VB2ref)**2 + m.smt**2) - m.smt+ sqrt((m.LT1[0]-m.LT1ref)**2 + m.smt**2) - m.smt + sqrt((m.LT2[0]-m.LT2ref)**2+m.smt**2) - m.smt + sum( sqrt((m.M1_0[i,0]-m.M1ref[i])**2 + m.smt**2) - m.smt + sqrt((m.M2_0[i,0] - m.M2ref[i])**2 + m.smt**2) - m.smt + sum( sqrt((m.x1_0[i,j,0]-m.x1ref[i,j])**2 + m.smt**2) - m.smt + sqrt((m.x2_0[i,j,0] - m.x2ref[i,j])**2 + m.smt**2) - m.smt for j in m.set_1_2) for i in m.set_1_NT) 
m.descent_con1 = Constraint(rule=descent_con1_rule)

def descent_con2_rule(m):
    return m.vk == sum( sqrt((m.D1[f]-m.D1ref)**2 + m.smt**2) - m.smt + sqrt((m.D2[f]-m.D2ref)**2 +m.smt**2) - m.smt + sqrt((m.B1[f]-m.B1ref)**2 + m.smt**2) - m.smt + sqrt((m.B2[f]-m.B1ref)**2 +m.smt**2) - m.smt + sqrt((m.VB1[f]-m.VB1ref)**2 + m.smt**2) - m.smt + sqrt((m.VB2[f]-m.VB2ref)**2  + m.smt**2) - m.smt + sqrt((m.LT1[f]-m.LT1ref)**2+m.smt**2) - m.smt + sqrt((m.LT2[f]-m.LT2ref)**2+m.smt**2)-m.smt + sum( sqrt((m.M1_0[i,f]-m.M1ref[i])**2+m.smt**2)-m.smt + sqrt((m.M2_0[i,f]-m.M2ref[i])**2+m.smt**2)-m.smt + sum( sqrt((m.x1_0[i,j,f]-m.x1ref[i,j])**2+m.smt**2)-m.smt + sqrt((m.x2_0[i,j,f]-m.x2ref[i,j])**2 + m.smt**2) - m.smt for j in m.set_1_2) for i in m.set_1_NT ) for f in m.fe) 
m.descent_con2 = Constraint(rule=descent_con2_rule) 

# def descent_con3_rule(m):
#     return m.vk <= m.vkmin1 - m.sigma*m.lkmin1 + m.desceps 
# m.descent_con3 = Constraint(rule=descent_con3_rule)

##########################
### OBJECTIVE FUNCTION ###
##########################

def cost_rule(m,f):
    return m.pF*m.F[f] + m.pV[f]*(m.VB1[f] + m.VB2[f]) - m.pA*m.D1[f] - m.pB*m.D2[f] - m.pC*m.B2[f] 
m.cost = Expression(m.fe,rule=cost_rule)

def penalty_2_rule(m,f):
    return m.D1eps[f] + m.B1eps[f] + m.D2eps[f] + m.B2eps[f] 
m.penalty_2 = Expression(m.fe,rule=penalty_2_rule)

def penalty_M_TC_rule(m,f):
    return sum(m.M1eps[i,f] + m.M2eps[i,f] + m.TC1eps[i,f] + m.TC2eps[i,f] for i in m.set_1_NT)
m.penalty_M_TC = Expression(m.fe,rule=penalty_M_TC_rule)

def penalty_x_y_rule(m,f):
    return m.x2ceps[f] + sum( sum( m.x1eps[i,j,f] + m.x2eps[i,j,f] 
        for j in m.set_1_2) 
        for i in m.set_1_NT) 
m.penalty_x_y = Expression(m.fe,rule=penalty_x_y_rule)

def penalty_V_L_rule(m,f):
    return sum( m.V1eps[i,f] + m.V2eps[i,f] for i in m.set_1_NTm1) +\
            sum(m.L1eps[i,f]+m.L2eps[i,f] for i in m.set_2_NT)
m.penalty_V_L = Expression(m.fe,rule=penalty_V_L_rule)


def tracking_rule(m,f):
    return (m.VB1[f]-m.VB1ref)**2 + (m.VB2[f]-m.VB2ref)**2 + \(m.LT1[f]-m.LT1ref)**2 + \
           (m.LT2[f]-m.LT2ref)**2 + (m.D1[f] - m.D1ref)**2 + (m.B1[f] - m.B1ref)**2 + \
           (m.D2[f] - m.D2ref)**2 + (m.B2[f] - m.B2ref)**2 + \
           sum(     (m.M1_0[i,f]  -  m.M1ref[i])**2 + (m.M2_0[i,f]  -  m.M2ref[i])**2 + \
               sum( (m.x1_0[i,j,f]-m.x1ref[i,j])**2 + (m.x2_0[i,j,f]-m.x2ref[i,j])**2   \
               for j in m.set_1_2) \
           for i in m.set_1_NT) 
m.tracking = Expression(m.fe,rule=tracking_rule) 

# def regu_1_rule(m,f):
#     return  m.F_w*(m.F[f] - m.Fref)**2 +  m.qF_w*(m.qF[f] - m.qFref)**2 + \
#            m.pV_w*(m.pV[f]-m.pVref)**2 + m.VB1_w*(m.VB1[f]-m.VB1ref)**2 + \
#            m.VB2_w*(m.VB2[f]-m.VB2ref)**2 + m.LT1_w*(m.LT1[f]-m.LT1ref)**2 + \
#            m.LT2_w*(LT2[f]-m.LT2ref)**2 
# m.regu_1 = Expression(m.fe,rule=regu_1_rule)
# 
# def regu_2_rule(m,f):
#     return m.D1_w*(m.D1[f]-m.D1ref)**2 + m.B1_w*(m.B1[f]-m.B1ref)**2 + \
#            m.D2_w*(m.D2[f]-m.D2ref)**2 + m.B2_w*(m.B2[f]-m.B2ref)**2 
# m.regu_2 = Expression(m.fe,rule=regu_2_rule)
# 
# def regu_M_TC_rule(m,f):
#     return sum(m.M1_w[i]*(m.M1_0[i,f]-m.M2ref[i])**2 + m.M2_w[i]*(m.M2_0[i,f]-m.M2ref[i])**2+\
#                m.TC1_w[i]*(m.TC1[i,f]-m.TC1ref[i])**2 + m.TC2_w*(m.TC2[i,f]-m.TC2ref[i])**2 \
#            for i in m.set_1_NT) 
# m.regu_M_TC = Expression(m.fe,rule=regu_2_rule)
# 
# def regu_x_y_rule(m,f):
#     return sum( sum( m.x1_w*(m.x1_0[i,j,f]-m.x1ref[i,j])**2 + \
#                      m.x2_w*(m.x2_0[i,j,f]-m.x2ref[i,j])**2    \
#                      for j in m.set_1_2) for i in m.set_1_NT) + \
#            sum( sum( m.y1_w*(m.y1_0[i,j,f]-m.y1ref[i,j])**2 + \
#                      m.y2_w*(m.y2_0[i,j,f]-m.y2ref[i,j])**2 \
#                      for j in m.set_1_2) for i in m.set_1_NTm1) 
# m.regu_x_y = Expression(m.fe,rule=regu_x_y_rule)
# 
# def regu_V_L_rule(m,f):
#     return sum( m.V1_w[i]*(m.V1[i,f]-m.V1ref[i])**2 + m.V2_w[i]*(m.V2[i,f]-m.V2ref[i])**2 \
#            for i in m.set_1_NTm1) + \
#            sum( m.L1_w[i]*(m.L1_0[i,f]-m.L1ref[i])**2+m.L2_w[i]*(m.L2_0[i,f]-m.L2ref[i])**2 \
#            for i in m.set_2_NT) 
# m.regu_V_L = Expression(m.fe,rule=regu_V_L_rule)
# 
# def regu_y_rule(m,f):
#     return sum( sum( m.y_1_1_w[i,j]*(m.y_1_1_0[i,j,f]-m.y_1_1ref[i,j])**2 + \
#                      m.y_1_2_w[i,j]*(m.y_1_2_0[i,j,f]-m.y_1_2ref[i,j])**2 + \
#                      m.y_2_1_w[i,j]*(m.y_2_1_0[i,j,f]-m.y_2_1ref[i,j])**2 + \
#                      m.y_2_2_w[i,j]*(m.y_2_2_0[i,j,f]-m.y_2_2ref[i,j])**2   \
#                 for j in m.set_1_2) for i in m.set_1_NTm1) 
# m.regu_y = Expression(m.fe,rule=regu_y_rule)
# 
# def regu_rule(m,f):
#     return m.regu_1[f] +m.regu_2[f] +m.regu_M_TC[f] +m.regu_x_y[f] +m.regu_V_L[f] +m.regu_y[f]
# m.regu = Expression(m.fe,rule=regu_rule)

def penalty_rule(m,f):
    return m.penalty_2[f] + m.penalty_M_TC[f] + \
            m.penalty_x_y[f] + m.penalty_V_L[f] 
m.penalty = Expression(m.fe,rule=penalty_rule)

#def obj_rule(m):
#    return m.rho*m.pen_switch*(m.termeps+m.desceps) + sum(m.econ_switch*m.cost[f] + m.rho*m.pen_switch*m.penalty[f] + m.regu_frac*m.regu[f] + m.track_switch*m.tracking[f] for f in m.fe)

def objtr_rule(m):
    return m.rho*m.pen_switch*(m.termeps+m.desceps) + \
        sum(m.rho*m.pen_switch*m.penalty[f] + \
        m.track_switch*m.tracking[f] for f in m.fe)
m.obj = Objective(rule=objtr_rule) 





























































